// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="switch_output_port_lookup,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7vx690tffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.359200,HLS_SYN_LAT=6,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=0,HLS_SYN_FF=1657,HLS_SYN_LUT=2487,HLS_VERSION=2018_2}" *)

module switch_output_port_lookup (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        reset_V,
        s_axis_tdata_V,
        s_axis_tkeep_V,
        s_axis_tuser_V,
        s_axis_tvalid_V,
        s_axis_tready_V,
        s_axis_tlast_V,
        m_axis_tdata_V,
        m_axis_tkeep_V,
        m_axis_tuser_V,
        m_axis_tvalid_V,
        m_axis_tready_V,
        m_axis_tlast_V
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] reset_V;
input  [255:0] s_axis_tdata_V;
input  [31:0] s_axis_tkeep_V;
input  [127:0] s_axis_tuser_V;
input  [0:0] s_axis_tvalid_V;
output  [0:0] s_axis_tready_V;
input  [0:0] s_axis_tlast_V;
output  [255:0] m_axis_tdata_V;
output  [31:0] m_axis_tkeep_V;
output  [127:0] m_axis_tuser_V;
output  [0:0] m_axis_tvalid_V;
input  [0:0] m_axis_tready_V;
output  [0:0] m_axis_tlast_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] s_axis_tready_V;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] Queue_ap_axis_size;
reg   [3:0] Queue_wr_pos_V_1;
reg   [3:0] Queue_rd_pos_V_1;
reg   [31:0] Queue_size;
reg   [3:0] Queue_wr_pos_V;
reg   [3:0] Queue_rd_pos_V;
reg   [3:0] Queue_buffer_packet_address0;
reg    Queue_buffer_packet_ce0;
reg    Queue_buffer_packet_we0;
wire   [416:0] Queue_buffer_packet_d0;
wire   [416:0] Queue_buffer_packet_q0;
reg   [3:0] Queue_buffer_V_address0;
reg    Queue_buffer_V_ce0;
reg    Queue_buffer_V_we0;
wire   [7:0] Queue_buffer_V_q0;
wire   [0:0] this_assign_2_fu_388_p2;
reg   [0:0] this_assign_2_reg_621;
wire   [0:0] rhs_V_fu_444_p2;
reg   [0:0] rhs_V_reg_628;
wire    ap_CS_fsm_state2;
reg   [47:0] dst_mac_V_reg_636;
reg   [47:0] src_mac_V_reg_641;
reg   [7:0] src_port_V_reg_646;
reg   [0:0] eth_done_V_reg_651;
reg    lut_ret_i_i_lut_fu_278_ap_start;
wire    lut_ret_i_i_lut_fu_278_ap_done;
wire    lut_ret_i_i_lut_fu_278_ap_idle;
wire    lut_ret_i_i_lut_fu_278_ap_ready;
wire   [7:0] lut_ret_i_i_lut_fu_278_ap_return_0;
wire   [0:0] lut_ret_i_i_lut_fu_278_ap_return_1;
wire    grp_Read_r_fu_353_ap_start;
wire    grp_Read_r_fu_353_ap_done;
wire    grp_Read_r_fu_353_ap_idle;
wire    grp_Read_r_fu_353_ap_ready;
wire   [31:0] grp_Read_r_fu_353_Queue_ap_axis_size_o;
wire    grp_Read_r_fu_353_Queue_ap_axis_size_o_ap_vld;
wire   [3:0] grp_Read_r_fu_353_Queue_wr_pos_V_1;
wire    grp_Read_r_fu_353_Queue_wr_pos_V_1_ap_vld;
wire   [3:0] grp_Read_r_fu_353_Queue_rd_pos_V_1_o;
wire    grp_Read_r_fu_353_Queue_rd_pos_V_1_o_ap_vld;
wire   [31:0] grp_Read_r_fu_353_Queue_size_o;
wire    grp_Read_r_fu_353_Queue_size_o_ap_vld;
wire   [3:0] grp_Read_r_fu_353_Queue_wr_pos_V;
wire    grp_Read_r_fu_353_Queue_wr_pos_V_ap_vld;
wire   [3:0] grp_Read_r_fu_353_Queue_rd_pos_V_o;
wire    grp_Read_r_fu_353_Queue_rd_pos_V_o_ap_vld;
wire   [3:0] grp_Read_r_fu_353_Queue_buffer_packet_address0;
wire    grp_Read_r_fu_353_Queue_buffer_packet_ce0;
wire   [3:0] grp_Read_r_fu_353_Queue_buffer_V_address0;
wire    grp_Read_r_fu_353_Queue_buffer_V_ce0;
wire   [255:0] grp_Read_r_fu_353_ap_return_0;
wire   [31:0] grp_Read_r_fu_353_ap_return_1;
wire   [127:0] grp_Read_r_fu_353_ap_return_2;
wire   [0:0] grp_Read_r_fu_353_ap_return_3;
wire   [0:0] grp_Read_r_fu_353_ap_return_4;
reg    eth_ret_i_i_eth_fu_377_ap_start;
wire    eth_ret_i_i_eth_fu_377_ap_done;
wire    eth_ret_i_i_eth_fu_377_ap_idle;
wire    eth_ret_i_i_eth_fu_377_ap_ready;
wire   [0:0] eth_ret_i_i_eth_fu_377_valid_V;
wire   [47:0] eth_ret_i_i_eth_fu_377_ap_return_0;
wire   [47:0] eth_ret_i_i_eth_fu_377_ap_return_1;
wire   [7:0] eth_ret_i_i_eth_fu_377_ap_return_2;
wire   [0:0] eth_ret_i_i_eth_fu_377_ap_return_3;
wire    ap_CS_fsm_state3;
reg    grp_Read_r_fu_353_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [0:0] r_V_fu_450_p2;
wire   [63:0] tmp_i_i_fu_493_p1;
wire   [63:0] tmp_i3_i_fu_555_p1;
wire   [0:0] lookup_done_V_fu_519_p1;
wire   [0:0] reset_V_read_read_fu_204_p2;
wire   [31:0] Queue_size_assign_i_fu_465_p2;
wire   [3:0] Queue_wr_pos_V_assi_fu_481_p2;
wire   [31:0] Queue_size_assign_i_1_fu_527_p2;
wire   [3:0] Queue_wr_pos_V_assi_1_fu_543_p2;
reg   [0:0] s_axis_tready_V_preg;
wire   [28:0] tmp_fu_434_p4;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 Queue_ap_axis_size = 32'd0;
#0 Queue_wr_pos_V_1 = 4'd0;
#0 Queue_rd_pos_V_1 = 4'd0;
#0 Queue_size = 32'd0;
#0 Queue_wr_pos_V = 4'd0;
#0 Queue_rd_pos_V = 4'd0;
#0 grp_Read_r_fu_353_ap_start_reg = 1'b0;
#0 s_axis_tready_V_preg = 1'd0;
end

switch_output_porbkb #(
    .DataWidth( 417 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
Queue_buffer_packet_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Queue_buffer_packet_address0),
    .ce0(Queue_buffer_packet_ce0),
    .we0(Queue_buffer_packet_we0),
    .d0(Queue_buffer_packet_d0),
    .q0(Queue_buffer_packet_q0)
);

switch_output_porcud #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
Queue_buffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Queue_buffer_V_address0),
    .ce0(Queue_buffer_V_ce0),
    .we0(Queue_buffer_V_we0),
    .d0(lut_ret_i_i_lut_fu_278_ap_return_0),
    .q0(Queue_buffer_V_q0)
);

lut lut_ret_i_i_lut_fu_278(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(lut_ret_i_i_lut_fu_278_ap_start),
    .ap_done(lut_ret_i_i_lut_fu_278_ap_done),
    .ap_idle(lut_ret_i_i_lut_fu_278_ap_idle),
    .ap_ready(lut_ret_i_i_lut_fu_278_ap_ready),
    .dst_mac_V(dst_mac_V_reg_636),
    .src_mac_V(src_mac_V_reg_641),
    .src_port_V(src_port_V_reg_646),
    .lookup_req_V(eth_done_V_reg_651),
    .reset_V(this_assign_2_reg_621),
    .ap_return_0(lut_ret_i_i_lut_fu_278_ap_return_0),
    .ap_return_1(lut_ret_i_i_lut_fu_278_ap_return_1)
);

Read_r grp_Read_r_fu_353(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Read_r_fu_353_ap_start),
    .ap_done(grp_Read_r_fu_353_ap_done),
    .ap_idle(grp_Read_r_fu_353_ap_idle),
    .ap_ready(grp_Read_r_fu_353_ap_ready),
    .m_axis_tready_V(m_axis_tready_V),
    .reset_V(this_assign_2_reg_621),
    .Queue_ap_axis_size_i(Queue_ap_axis_size),
    .Queue_ap_axis_size_o(grp_Read_r_fu_353_Queue_ap_axis_size_o),
    .Queue_ap_axis_size_o_ap_vld(grp_Read_r_fu_353_Queue_ap_axis_size_o_ap_vld),
    .Queue_wr_pos_V_1(grp_Read_r_fu_353_Queue_wr_pos_V_1),
    .Queue_wr_pos_V_1_ap_vld(grp_Read_r_fu_353_Queue_wr_pos_V_1_ap_vld),
    .Queue_rd_pos_V_1_i(Queue_rd_pos_V_1),
    .Queue_rd_pos_V_1_o(grp_Read_r_fu_353_Queue_rd_pos_V_1_o),
    .Queue_rd_pos_V_1_o_ap_vld(grp_Read_r_fu_353_Queue_rd_pos_V_1_o_ap_vld),
    .Queue_size_i(Queue_size),
    .Queue_size_o(grp_Read_r_fu_353_Queue_size_o),
    .Queue_size_o_ap_vld(grp_Read_r_fu_353_Queue_size_o_ap_vld),
    .Queue_wr_pos_V(grp_Read_r_fu_353_Queue_wr_pos_V),
    .Queue_wr_pos_V_ap_vld(grp_Read_r_fu_353_Queue_wr_pos_V_ap_vld),
    .Queue_rd_pos_V_i(Queue_rd_pos_V),
    .Queue_rd_pos_V_o(grp_Read_r_fu_353_Queue_rd_pos_V_o),
    .Queue_rd_pos_V_o_ap_vld(grp_Read_r_fu_353_Queue_rd_pos_V_o_ap_vld),
    .Queue_buffer_packet_address0(grp_Read_r_fu_353_Queue_buffer_packet_address0),
    .Queue_buffer_packet_ce0(grp_Read_r_fu_353_Queue_buffer_packet_ce0),
    .Queue_buffer_packet_q0(Queue_buffer_packet_q0),
    .Queue_buffer_V_address0(grp_Read_r_fu_353_Queue_buffer_V_address0),
    .Queue_buffer_V_ce0(grp_Read_r_fu_353_Queue_buffer_V_ce0),
    .Queue_buffer_V_q0(Queue_buffer_V_q0),
    .ap_return_0(grp_Read_r_fu_353_ap_return_0),
    .ap_return_1(grp_Read_r_fu_353_ap_return_1),
    .ap_return_2(grp_Read_r_fu_353_ap_return_2),
    .ap_return_3(grp_Read_r_fu_353_ap_return_3),
    .ap_return_4(grp_Read_r_fu_353_ap_return_4)
);

eth eth_ret_i_i_eth_fu_377(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(eth_ret_i_i_eth_fu_377_ap_start),
    .ap_done(eth_ret_i_i_eth_fu_377_ap_done),
    .ap_idle(eth_ret_i_i_eth_fu_377_ap_idle),
    .ap_ready(eth_ret_i_i_eth_fu_377_ap_ready),
    .tdata_V(s_axis_tdata_V),
    .tuser_V(s_axis_tuser_V),
    .valid_V(eth_ret_i_i_eth_fu_377_valid_V),
    .tlast_V(s_axis_tlast_V),
    .reset_V(this_assign_2_reg_621),
    .ap_return_0(eth_ret_i_i_eth_fu_377_ap_return_0),
    .ap_return_1(eth_ret_i_i_eth_fu_377_ap_return_1),
    .ap_return_2(eth_ret_i_i_eth_fu_377_ap_return_2),
    .ap_return_3(eth_ret_i_i_eth_fu_377_ap_return_3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Read_r_fu_353_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_Read_r_fu_353_ap_start_reg <= 1'b1;
        end else if ((grp_Read_r_fu_353_ap_ready == 1'b1)) begin
            grp_Read_r_fu_353_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_tready_V_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            s_axis_tready_V_preg <= rhs_V_reg_628;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((r_V_fu_450_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        Queue_ap_axis_size <= Queue_size_assign_i_fu_465_p2;
    end else if (((reset_V_read_read_fu_204_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Queue_ap_axis_size <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (grp_Read_r_fu_353_Queue_ap_axis_size_o_ap_vld == 1'b1))) begin
        Queue_ap_axis_size <= grp_Read_r_fu_353_Queue_ap_axis_size_o;
    end
end

always @ (posedge ap_clk) begin
    if (((reset_V_read_read_fu_204_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Queue_rd_pos_V <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (grp_Read_r_fu_353_Queue_rd_pos_V_o_ap_vld == 1'b1))) begin
        Queue_rd_pos_V <= grp_Read_r_fu_353_Queue_rd_pos_V_o;
    end
end

always @ (posedge ap_clk) begin
    if (((reset_V_read_read_fu_204_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Queue_rd_pos_V_1 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (grp_Read_r_fu_353_Queue_rd_pos_V_1_o_ap_vld == 1'b1))) begin
        Queue_rd_pos_V_1 <= grp_Read_r_fu_353_Queue_rd_pos_V_1_o;
    end
end

always @ (posedge ap_clk) begin
    if (((lookup_done_V_fu_519_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        Queue_size <= Queue_size_assign_i_1_fu_527_p2;
    end else if (((reset_V_read_read_fu_204_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Queue_size <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (grp_Read_r_fu_353_Queue_size_o_ap_vld == 1'b1))) begin
        Queue_size <= grp_Read_r_fu_353_Queue_size_o;
    end
end

always @ (posedge ap_clk) begin
    if (((lookup_done_V_fu_519_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        Queue_wr_pos_V <= Queue_wr_pos_V_assi_1_fu_543_p2;
    end else if (((reset_V_read_read_fu_204_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Queue_wr_pos_V <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (grp_Read_r_fu_353_Queue_wr_pos_V_ap_vld == 1'b1))) begin
        Queue_wr_pos_V <= grp_Read_r_fu_353_Queue_wr_pos_V;
    end
end

always @ (posedge ap_clk) begin
    if (((r_V_fu_450_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        Queue_wr_pos_V_1 <= Queue_wr_pos_V_assi_fu_481_p2;
    end else if (((reset_V_read_read_fu_204_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Queue_wr_pos_V_1 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (grp_Read_r_fu_353_Queue_wr_pos_V_1_ap_vld == 1'b1))) begin
        Queue_wr_pos_V_1 <= grp_Read_r_fu_353_Queue_wr_pos_V_1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dst_mac_V_reg_636 <= eth_ret_i_i_eth_fu_377_ap_return_0;
        eth_done_V_reg_651 <= eth_ret_i_i_eth_fu_377_ap_return_3;
        rhs_V_reg_628 <= rhs_V_fu_444_p2;
        src_mac_V_reg_641 <= eth_ret_i_i_eth_fu_377_ap_return_1;
        src_port_V_reg_646 <= eth_ret_i_i_eth_fu_377_ap_return_2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        this_assign_2_reg_621 <= this_assign_2_fu_388_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Queue_buffer_V_address0 = tmp_i3_i_fu_555_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        Queue_buffer_V_address0 = grp_Read_r_fu_353_Queue_buffer_V_address0;
    end else begin
        Queue_buffer_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Queue_buffer_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        Queue_buffer_V_ce0 = grp_Read_r_fu_353_Queue_buffer_V_ce0;
    end else begin
        Queue_buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((lookup_done_V_fu_519_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        Queue_buffer_V_we0 = 1'b1;
    end else begin
        Queue_buffer_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Queue_buffer_packet_address0 = tmp_i_i_fu_493_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        Queue_buffer_packet_address0 = grp_Read_r_fu_353_Queue_buffer_packet_address0;
    end else begin
        Queue_buffer_packet_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Queue_buffer_packet_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        Queue_buffer_packet_ce0 = grp_Read_r_fu_353_Queue_buffer_packet_ce0;
    end else begin
        Queue_buffer_packet_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((r_V_fu_450_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        Queue_buffer_packet_we0 = 1'b1;
    end else begin
        Queue_buffer_packet_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (grp_Read_r_fu_353_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (grp_Read_r_fu_353_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        eth_ret_i_i_eth_fu_377_ap_start = 1'b1;
    end else begin
        eth_ret_i_i_eth_fu_377_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        lut_ret_i_i_lut_fu_278_ap_start = 1'b1;
    end else begin
        lut_ret_i_i_lut_fu_278_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        s_axis_tready_V = rhs_V_reg_628;
    end else begin
        s_axis_tready_V = s_axis_tready_V_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_Read_r_fu_353_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Queue_buffer_packet_d0 = {{{{s_axis_tlast_V}, {s_axis_tuser_V}}, {s_axis_tkeep_V}}, {s_axis_tdata_V}};

assign Queue_size_assign_i_1_fu_527_p2 = (Queue_size + 32'd1);

assign Queue_size_assign_i_fu_465_p2 = (Queue_ap_axis_size + 32'd1);

assign Queue_wr_pos_V_assi_1_fu_543_p2 = (Queue_wr_pos_V + 4'd1);

assign Queue_wr_pos_V_assi_fu_481_p2 = (Queue_wr_pos_V_1 + 4'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign eth_ret_i_i_eth_fu_377_valid_V = (s_axis_tvalid_V & rhs_V_fu_444_p2);

assign grp_Read_r_fu_353_ap_start = grp_Read_r_fu_353_ap_start_reg;

assign lookup_done_V_fu_519_p1 = lut_ret_i_i_lut_fu_278_ap_return_1;

assign m_axis_tdata_V = grp_Read_r_fu_353_ap_return_0;

assign m_axis_tkeep_V = grp_Read_r_fu_353_ap_return_1;

assign m_axis_tlast_V = grp_Read_r_fu_353_ap_return_4;

assign m_axis_tuser_V = grp_Read_r_fu_353_ap_return_2;

assign m_axis_tvalid_V = grp_Read_r_fu_353_ap_return_3;

assign r_V_fu_450_p2 = (s_axis_tvalid_V & rhs_V_fu_444_p2);

assign reset_V_read_read_fu_204_p2 = reset_V;

assign rhs_V_fu_444_p2 = (($signed(tmp_fu_434_p4) < $signed(29'd1)) ? 1'b1 : 1'b0);

assign this_assign_2_fu_388_p2 = (reset_V ^ 1'd1);

assign tmp_fu_434_p4 = {{Queue_ap_axis_size[31:3]}};

assign tmp_i3_i_fu_555_p1 = Queue_wr_pos_V;

assign tmp_i_i_fu_493_p1 = Queue_wr_pos_V_1;

endmodule //switch_output_port_lookup
