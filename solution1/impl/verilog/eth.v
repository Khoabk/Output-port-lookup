// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module eth (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tdata_V,
        tuser_V,
        valid_V,
        tlast_V,
        reset_V,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [255:0] tdata_V;
input  [127:0] tuser_V;
input  [0:0] valid_V;
input  [0:0] tlast_V;
input  [0:0] reset_V;
output  [47:0] ap_return_0;
output  [47:0] ap_return_1;
output  [7:0] ap_return_2;
output  [0:0] ap_return_3;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[47:0] ap_return_0;
reg[47:0] ap_return_1;
reg[7:0] ap_return_2;
reg[0:0] ap_return_3;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] state;
reg   [0:0] ap_phi_mux_write_flag3_1_phi_fu_77_p8;
wire   [0:0] reset_V_read_read_fu_44_p2;
wire   [0:0] state_load_load_fu_162_p1;
wire   [0:0] valid_V_read_read_fu_56_p2;
reg   [47:0] ap_phi_mux_src_mac_V_1_phi_fu_94_p8;
reg   [47:0] ap_phi_mux_dst_mac_V_1_phi_fu_110_p8;
wire   [47:0] tmp_fu_177_p1;
reg   [7:0] ap_phi_mux_src_port_V_1_phi_fu_126_p8;
reg   [0:0] ap_phi_mux_eth_done_V_1_phi_fu_142_p8;
wire   [0:0] brmerge_demorgan_fu_199_p2;
wire   [47:0] ssdm_int_V_write_ass_fu_205_p3;
wire   [47:0] ssdm_int_V_write_ass_2_fu_213_p3;
wire   [7:0] ssdm_int_V_write_ass_3_fu_221_p3;
wire   [0:0] ssdm_int_V_write_ass_4_fu_229_p2;
reg   [47:0] ap_return_0_preg;
reg   [47:0] ap_return_1_preg;
reg   [7:0] ap_return_2_preg;
reg   [0:0] ap_return_3_preg;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 state = 1'd0;
#0 ap_return_0_preg = 48'd0;
#0 ap_return_1_preg = 48'd0;
#0 ap_return_2_preg = 8'd0;
#0 ap_return_3_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 48'd0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_0_preg <= ssdm_int_V_write_ass_fu_205_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 48'd0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_1_preg <= ssdm_int_V_write_ass_2_fu_213_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 8'd0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_2_preg <= ssdm_int_V_write_ass_3_fu_221_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 1'd0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_3_preg <= ssdm_int_V_write_ass_4_fu_229_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_start == 1'b1) & (brmerge_demorgan_fu_199_p2 == 1'd1) & (state_load_load_fu_162_p1 == 1'd1) & (reset_V_read_read_fu_44_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (reset_V_read_read_fu_44_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        state <= 1'd0;
    end else if (((ap_start == 1'b1) & (valid_V_read_read_fu_56_p2 == 1'd1) & (state_load_load_fu_162_p1 == 1'd0) & (reset_V_read_read_fu_44_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        state <= 1'd1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((valid_V_read_read_fu_56_p2 == 1'd1) & (state_load_load_fu_162_p1 == 1'd0) & (reset_V_read_read_fu_44_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_dst_mac_V_1_phi_fu_110_p8 = tmp_fu_177_p1;
    end else if ((((state_load_load_fu_162_p1 == 1'd1) & (reset_V_read_read_fu_44_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((reset_V_read_read_fu_44_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_dst_mac_V_1_phi_fu_110_p8 = 48'd0;
    end else begin
        ap_phi_mux_dst_mac_V_1_phi_fu_110_p8 = 'bx;
    end
end

always @ (*) begin
    if ((((valid_V_read_read_fu_56_p2 == 1'd0) & (state_load_load_fu_162_p1 == 1'd0) & (reset_V_read_read_fu_44_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((valid_V_read_read_fu_56_p2 == 1'd1) & (state_load_load_fu_162_p1 == 1'd0) & (reset_V_read_read_fu_44_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_eth_done_V_1_phi_fu_142_p8 = 1'd1;
    end else if ((((state_load_load_fu_162_p1 == 1'd1) & (reset_V_read_read_fu_44_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((reset_V_read_read_fu_44_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_eth_done_V_1_phi_fu_142_p8 = 1'd0;
    end else begin
        ap_phi_mux_eth_done_V_1_phi_fu_142_p8 = 'bx;
    end
end

always @ (*) begin
    if (((valid_V_read_read_fu_56_p2 == 1'd1) & (state_load_load_fu_162_p1 == 1'd0) & (reset_V_read_read_fu_44_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_src_mac_V_1_phi_fu_94_p8 = {{tdata_V[95:48]}};
    end else if ((((state_load_load_fu_162_p1 == 1'd1) & (reset_V_read_read_fu_44_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((reset_V_read_read_fu_44_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_src_mac_V_1_phi_fu_94_p8 = 48'd0;
    end else begin
        ap_phi_mux_src_mac_V_1_phi_fu_94_p8 = 'bx;
    end
end

always @ (*) begin
    if (((valid_V_read_read_fu_56_p2 == 1'd1) & (state_load_load_fu_162_p1 == 1'd0) & (reset_V_read_read_fu_44_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_src_port_V_1_phi_fu_126_p8 = {{tuser_V[23:16]}};
    end else if ((((state_load_load_fu_162_p1 == 1'd1) & (reset_V_read_read_fu_44_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((reset_V_read_read_fu_44_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_src_port_V_1_phi_fu_126_p8 = 8'd0;
    end else begin
        ap_phi_mux_src_port_V_1_phi_fu_126_p8 = 'bx;
    end
end

always @ (*) begin
    if (((valid_V_read_read_fu_56_p2 == 1'd0) & (state_load_load_fu_162_p1 == 1'd0) & (reset_V_read_read_fu_44_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_write_flag3_1_phi_fu_77_p8 = 1'd0;
    end else if ((((valid_V_read_read_fu_56_p2 == 1'd1) & (state_load_load_fu_162_p1 == 1'd0) & (reset_V_read_read_fu_44_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((state_load_load_fu_162_p1 == 1'd1) & (reset_V_read_read_fu_44_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((reset_V_read_read_fu_44_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_write_flag3_1_phi_fu_77_p8 = 1'd1;
    end else begin
        ap_phi_mux_write_flag3_1_phi_fu_77_p8 = 'bx;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_0 = ssdm_int_V_write_ass_fu_205_p3;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_1 = ssdm_int_V_write_ass_2_fu_213_p3;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_2 = ssdm_int_V_write_ass_3_fu_221_p3;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_3 = ssdm_int_V_write_ass_4_fu_229_p2;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign brmerge_demorgan_fu_199_p2 = (valid_V & tlast_V);

assign reset_V_read_read_fu_44_p2 = reset_V;

assign ssdm_int_V_write_ass_2_fu_213_p3 = ((ap_phi_mux_write_flag3_1_phi_fu_77_p8[0:0] === 1'b1) ? ap_phi_mux_src_mac_V_1_phi_fu_94_p8 : 48'd0);

assign ssdm_int_V_write_ass_3_fu_221_p3 = ((ap_phi_mux_write_flag3_1_phi_fu_77_p8[0:0] === 1'b1) ? ap_phi_mux_src_port_V_1_phi_fu_126_p8 : 8'd0);

assign ssdm_int_V_write_ass_4_fu_229_p2 = (ap_phi_mux_write_flag3_1_phi_fu_77_p8 & ap_phi_mux_eth_done_V_1_phi_fu_142_p8);

assign ssdm_int_V_write_ass_fu_205_p3 = ((ap_phi_mux_write_flag3_1_phi_fu_77_p8[0:0] === 1'b1) ? ap_phi_mux_dst_mac_V_1_phi_fu_110_p8 : 48'd0);

assign state_load_load_fu_162_p1 = state;

assign tmp_fu_177_p1 = tdata_V[47:0];

assign valid_V_read_read_fu_56_p2 = valid_V;

endmodule //eth
