-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Read_r is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axis_tready_V : IN STD_LOGIC_VECTOR (0 downto 0);
    reset_V : IN STD_LOGIC_VECTOR (0 downto 0);
    Queue_ap_axis_size_i : IN STD_LOGIC_VECTOR (31 downto 0);
    Queue_ap_axis_size_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    Queue_ap_axis_size_o_ap_vld : OUT STD_LOGIC;
    Queue_wr_pos_V_1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    Queue_wr_pos_V_1_ap_vld : OUT STD_LOGIC;
    Queue_rd_pos_V_1_i : IN STD_LOGIC_VECTOR (3 downto 0);
    Queue_rd_pos_V_1_o : OUT STD_LOGIC_VECTOR (3 downto 0);
    Queue_rd_pos_V_1_o_ap_vld : OUT STD_LOGIC;
    Queue_size_i : IN STD_LOGIC_VECTOR (31 downto 0);
    Queue_size_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    Queue_size_o_ap_vld : OUT STD_LOGIC;
    Queue_wr_pos_V : OUT STD_LOGIC_VECTOR (3 downto 0);
    Queue_wr_pos_V_ap_vld : OUT STD_LOGIC;
    Queue_rd_pos_V_i : IN STD_LOGIC_VECTOR (3 downto 0);
    Queue_rd_pos_V_o : OUT STD_LOGIC_VECTOR (3 downto 0);
    Queue_rd_pos_V_o_ap_vld : OUT STD_LOGIC;
    Queue_buffer_packet_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    Queue_buffer_packet_ce0 : OUT STD_LOGIC;
    Queue_buffer_packet_q0 : IN STD_LOGIC_VECTOR (416 downto 0);
    Queue_buffer_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    Queue_buffer_V_ce0 : OUT STD_LOGIC;
    Queue_buffer_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (255 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (127 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of Read_r is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal state_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    signal reset_V_read_read_fu_64_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Queue_rd_pos_V_1_lo_reg_452 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal Queue_rd_pos_V_load_reg_462 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_fu_142_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i2_fu_151_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_state_1_new_1_i_cas_fu_328_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_state_1_flag_1_i_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Queue_size_assign_i_fu_349_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Queue_rd_pos_V_assi_fu_361_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal Queue_size_assign_i_2_fu_372_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_port_rd_V_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Queue_rd_pos_V_assi_1_fu_384_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sth_V_2_fu_160_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal this_assign_s_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_198_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp2_i_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_i_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_186_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_i_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_sel_tmp3_i_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_i_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_i_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_demorgan_i_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_i_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_i_not_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_202_p5 : STD_LOGIC_VECTOR (127 downto 0);
    signal state_1_flag_1_i_fu_278_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_sel_tmp7_i_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_state_1_new_1_i_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal send_packet_V_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal internal_m_valid_V_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_395_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal sth_V_fu_304_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv256_lc_1;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_return_0_preg <= tmp_15_fu_395_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_return_1_preg <= Queue_buffer_packet_q0(287 downto 256);
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv128_lc_1;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_return_2_preg <= sth_V_fu_304_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_return_3_preg <= internal_m_valid_V_fu_338_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_return_4_preg <= Queue_buffer_packet_q0(416 downto 416);
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                Queue_rd_pos_V_1_lo_reg_452 <= Queue_rd_pos_V_1_i;
                Queue_rd_pos_V_load_reg_462 <= Queue_rd_pos_V_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((p_state_1_flag_1_i_fu_318_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    state_1(0) <= p_state_1_new_1_i_cas_fu_328_p1(0);
            end if;
        end if;
    end process;
    state_1(31 downto 1) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    Queue_ap_axis_size_o_assign_proc : process(ap_start, ap_CS_fsm_state1, Queue_ap_axis_size_i, reset_V_read_read_fu_64_p2, ap_CS_fsm_state3, Queue_size_assign_i_fu_349_p2, r_V_fu_344_p2)
    begin
        if (((r_V_fu_344_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            Queue_ap_axis_size_o <= Queue_size_assign_i_fu_349_p2;
        elsif (((ap_start = ap_const_logic_1) and (reset_V_read_read_fu_64_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Queue_ap_axis_size_o <= ap_const_lv32_0;
        else 
            Queue_ap_axis_size_o <= Queue_ap_axis_size_i;
        end if; 
    end process;


    Queue_ap_axis_size_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, reset_V_read_read_fu_64_p2, ap_CS_fsm_state3, r_V_fu_344_p2)
    begin
        if ((((r_V_fu_344_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_1) and (reset_V_read_read_fu_64_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            Queue_ap_axis_size_o_ap_vld <= ap_const_logic_1;
        else 
            Queue_ap_axis_size_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Queue_buffer_V_address0 <= tmp_i2_fu_151_p1(4 - 1 downto 0);

    Queue_buffer_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Queue_buffer_V_ce0 <= ap_const_logic_1;
        else 
            Queue_buffer_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Queue_buffer_packet_address0 <= tmp_i_fu_142_p1(4 - 1 downto 0);

    Queue_buffer_packet_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Queue_buffer_packet_ce0 <= ap_const_logic_1;
        else 
            Queue_buffer_packet_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Queue_rd_pos_V_1_o_assign_proc : process(ap_start, ap_CS_fsm_state1, Queue_rd_pos_V_1_i, reset_V_read_read_fu_64_p2, ap_CS_fsm_state3, r_V_fu_344_p2, Queue_rd_pos_V_assi_fu_361_p2)
    begin
        if (((r_V_fu_344_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            Queue_rd_pos_V_1_o <= Queue_rd_pos_V_assi_fu_361_p2;
        elsif (((ap_start = ap_const_logic_1) and (reset_V_read_read_fu_64_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Queue_rd_pos_V_1_o <= ap_const_lv4_0;
        else 
            Queue_rd_pos_V_1_o <= Queue_rd_pos_V_1_i;
        end if; 
    end process;


    Queue_rd_pos_V_1_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, reset_V_read_read_fu_64_p2, ap_CS_fsm_state3, r_V_fu_344_p2)
    begin
        if ((((r_V_fu_344_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_1) and (reset_V_read_read_fu_64_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            Queue_rd_pos_V_1_o_ap_vld <= ap_const_logic_1;
        else 
            Queue_rd_pos_V_1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Queue_rd_pos_V_assi_1_fu_384_p2 <= std_logic_vector(unsigned(Queue_rd_pos_V_load_reg_462) + unsigned(ap_const_lv4_1));
    Queue_rd_pos_V_assi_fu_361_p2 <= std_logic_vector(unsigned(Queue_rd_pos_V_1_lo_reg_452) + unsigned(ap_const_lv4_1));

    Queue_rd_pos_V_o_assign_proc : process(ap_start, ap_CS_fsm_state1, Queue_rd_pos_V_i, reset_V_read_read_fu_64_p2, ap_CS_fsm_state3, dst_port_rd_V_fu_312_p2, Queue_rd_pos_V_assi_1_fu_384_p2)
    begin
        if (((dst_port_rd_V_fu_312_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            Queue_rd_pos_V_o <= Queue_rd_pos_V_assi_1_fu_384_p2;
        elsif (((ap_start = ap_const_logic_1) and (reset_V_read_read_fu_64_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Queue_rd_pos_V_o <= ap_const_lv4_0;
        else 
            Queue_rd_pos_V_o <= Queue_rd_pos_V_i;
        end if; 
    end process;


    Queue_rd_pos_V_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, reset_V_read_read_fu_64_p2, ap_CS_fsm_state3, dst_port_rd_V_fu_312_p2)
    begin
        if ((((dst_port_rd_V_fu_312_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_1) and (reset_V_read_read_fu_64_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            Queue_rd_pos_V_o_ap_vld <= ap_const_logic_1;
        else 
            Queue_rd_pos_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Queue_size_assign_i_2_fu_372_p2 <= std_logic_vector(unsigned(Queue_size_i) + unsigned(ap_const_lv32_FFFFFFFF));
    Queue_size_assign_i_fu_349_p2 <= std_logic_vector(unsigned(Queue_ap_axis_size_i) + unsigned(ap_const_lv32_FFFFFFFF));

    Queue_size_o_assign_proc : process(ap_start, ap_CS_fsm_state1, Queue_size_i, reset_V_read_read_fu_64_p2, ap_CS_fsm_state3, Queue_size_assign_i_2_fu_372_p2, dst_port_rd_V_fu_312_p2)
    begin
        if (((dst_port_rd_V_fu_312_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            Queue_size_o <= Queue_size_assign_i_2_fu_372_p2;
        elsif (((ap_start = ap_const_logic_1) and (reset_V_read_read_fu_64_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Queue_size_o <= ap_const_lv32_0;
        else 
            Queue_size_o <= Queue_size_i;
        end if; 
    end process;


    Queue_size_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, reset_V_read_read_fu_64_p2, ap_CS_fsm_state3, dst_port_rd_V_fu_312_p2)
    begin
        if ((((dst_port_rd_V_fu_312_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_1) and (reset_V_read_read_fu_64_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            Queue_size_o_ap_vld <= ap_const_logic_1;
        else 
            Queue_size_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Queue_wr_pos_V <= ap_const_lv4_0;
    Queue_wr_pos_V_1 <= ap_const_lv4_0;

    Queue_wr_pos_V_1_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, reset_V_read_read_fu_64_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (reset_V_read_read_fu_64_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Queue_wr_pos_V_1_ap_vld <= ap_const_logic_1;
        else 
            Queue_wr_pos_V_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    Queue_wr_pos_V_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, reset_V_read_read_fu_64_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (reset_V_read_read_fu_64_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Queue_wr_pos_V_ap_vld <= ap_const_logic_1;
        else 
            Queue_wr_pos_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state3, tmp_15_fu_395_p1, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_return_0 <= tmp_15_fu_395_p1;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(Queue_buffer_packet_q0, ap_CS_fsm_state3, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_return_1 <= Queue_buffer_packet_q0(287 downto 256);
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state3, sth_V_fu_304_p3, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_return_2 <= sth_V_fu_304_p3;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state3, internal_m_valid_V_fu_338_p2, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_return_3 <= internal_m_valid_V_fu_338_p2;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(Queue_buffer_packet_q0, ap_CS_fsm_state3, ap_return_4_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_return_4 <= Queue_buffer_packet_q0(416 downto 416);
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;

    brmerge_demorgan_i_fu_214_p2 <= (this_assign_s_fu_180_p2 and m_axis_tready_V);
    dst_port_rd_V_fu_312_p2 <= (sel_tmp7_i_fu_272_p2 and brmerge_demorgan_i_fu_214_p2);
    internal_m_valid_V_fu_338_p2 <= (this_assign_s_fu_180_p2 and send_packet_V_fu_298_p2);
    not_sel_tmp3_i_fu_237_p2 <= (sel_tmp3_i_fu_231_p2 xor ap_const_lv1_1);
    not_sel_tmp7_i_fu_292_p2 <= (val_assign_fu_174_p2 or sel_tmp2_i_not_fu_286_p2);
    p_Result_s_fu_202_p5 <= (sth_V_2_fu_160_p4(127 downto 32) & Queue_buffer_V_q0 & sth_V_2_fu_160_p4(23 downto 0));
    p_state_1_flag_1_i_fu_318_p2 <= (state_1_flag_1_i_fu_278_p3 or reset_V);
    p_state_1_new_1_i_cas_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_state_1_new_1_i_fu_323_p2),32));
    p_state_1_new_1_i_fu_323_p2 <= (reset_V or not_sel_tmp7_i_fu_292_p2);
    r_V_fu_344_p2 <= (m_axis_tready_V and internal_m_valid_V_fu_338_p2);
    reset_V_read_read_fu_64_p2 <= reset_V;
    sel_tmp2_i_fu_225_p2 <= "1" when (tmp_14_fu_198_p1 = ap_const_lv2_1) else "0";
    sel_tmp2_i_not_fu_286_p2 <= (sel_tmp2_i_fu_225_p2 xor ap_const_lv1_1);
    sel_tmp3_i_fu_231_p2 <= (val_assign_fu_174_p2 and sel_tmp2_i_fu_225_p2);
    sel_tmp4_i_fu_260_p2 <= (tmp_fu_243_p2 and tmp1_fu_255_p2);
    sel_tmp6_i_fu_266_p2 <= (val_assign_fu_174_p2 xor ap_const_lv1_1);
    sel_tmp7_i_fu_272_p2 <= (sel_tmp6_i_fu_266_p2 and sel_tmp2_i_fu_225_p2);
    sel_tmp_i_fu_219_p2 <= "1" when (tmp_14_fu_198_p1 = ap_const_lv2_0) else "0";
    send_packet_V_fu_298_p2 <= (sel_tmp7_i_fu_272_p2 or not_sel_tmp3_i_fu_237_p2);
    state_1_flag_1_i_fu_278_p3 <= 
        brmerge_demorgan_i_fu_214_p2 when (sel_tmp7_i_fu_272_p2(0) = '1') else 
        sel_tmp4_i_fu_260_p2;
    sth_V_2_fu_160_p4 <= Queue_buffer_packet_q0(415 downto 288);
    sth_V_fu_304_p3 <= 
        p_Result_s_fu_202_p5 when (sel_tmp7_i_fu_272_p2(0) = '1') else 
        sth_V_2_fu_160_p4;
    this_assign_s_fu_180_p2 <= "0" when (Queue_ap_axis_size_i = ap_const_lv32_0) else "1";
    tmp1_fu_255_p2 <= (tmp2_fu_249_p2 and m_axis_tready_V);
    tmp2_fu_249_p2 <= (sel_tmp_i_fu_219_p2 and not_sel_tmp3_i_fu_237_p2);
    tmp_13_fu_186_p3 <= Queue_buffer_packet_q0(416 downto 416);
    tmp_14_fu_198_p1 <= state_1(2 - 1 downto 0);
    tmp_15_fu_395_p1 <= Queue_buffer_packet_q0(256 - 1 downto 0);
    tmp_fu_243_p2 <= (tmp_13_fu_186_p3 and this_assign_s_fu_180_p2);
    tmp_i2_fu_151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Queue_rd_pos_V_i),64));
    tmp_i_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Queue_rd_pos_V_1_i),64));
    val_assign_fu_174_p2 <= "1" when (Queue_size_i = ap_const_lv32_0) else "0";
end behav;
