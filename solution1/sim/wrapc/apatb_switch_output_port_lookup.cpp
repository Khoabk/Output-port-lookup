// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#define AP_INT_MAX_W 32678

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "s_axis_tdata_V"
#define AUTOTB_TVIN_s_axis_tdata_V  "../tv/cdatafile/c.switch_output_port_lookup.autotvin_s_axis_tdata_V.dat"
// wrapc file define: "s_axis_tkeep_V"
#define AUTOTB_TVIN_s_axis_tkeep_V  "../tv/cdatafile/c.switch_output_port_lookup.autotvin_s_axis_tkeep_V.dat"
// wrapc file define: "s_axis_tuser_V"
#define AUTOTB_TVIN_s_axis_tuser_V  "../tv/cdatafile/c.switch_output_port_lookup.autotvin_s_axis_tuser_V.dat"
// wrapc file define: "s_axis_tvalid_V"
#define AUTOTB_TVIN_s_axis_tvalid_V  "../tv/cdatafile/c.switch_output_port_lookup.autotvin_s_axis_tvalid_V.dat"
// wrapc file define: "s_axis_tready_V"
#define AUTOTB_TVOUT_s_axis_tready_V  "../tv/cdatafile/c.switch_output_port_lookup.autotvout_s_axis_tready_V.dat"
// wrapc file define: "s_axis_tlast_V"
#define AUTOTB_TVIN_s_axis_tlast_V  "../tv/cdatafile/c.switch_output_port_lookup.autotvin_s_axis_tlast_V.dat"
// wrapc file define: "m_axis_tdata_V"
#define AUTOTB_TVOUT_m_axis_tdata_V  "../tv/cdatafile/c.switch_output_port_lookup.autotvout_m_axis_tdata_V.dat"
// wrapc file define: "m_axis_tkeep_V"
#define AUTOTB_TVOUT_m_axis_tkeep_V  "../tv/cdatafile/c.switch_output_port_lookup.autotvout_m_axis_tkeep_V.dat"
// wrapc file define: "m_axis_tuser_V"
#define AUTOTB_TVOUT_m_axis_tuser_V  "../tv/cdatafile/c.switch_output_port_lookup.autotvout_m_axis_tuser_V.dat"
// wrapc file define: "m_axis_tvalid_V"
#define AUTOTB_TVOUT_m_axis_tvalid_V  "../tv/cdatafile/c.switch_output_port_lookup.autotvout_m_axis_tvalid_V.dat"
// wrapc file define: "m_axis_tready_V"
#define AUTOTB_TVIN_m_axis_tready_V  "../tv/cdatafile/c.switch_output_port_lookup.autotvin_m_axis_tready_V.dat"
// wrapc file define: "m_axis_tlast_V"
#define AUTOTB_TVOUT_m_axis_tlast_V  "../tv/cdatafile/c.switch_output_port_lookup.autotvout_m_axis_tlast_V.dat"
// wrapc file define: "reset_V"
#define AUTOTB_TVIN_reset_V  "../tv/cdatafile/c.switch_output_port_lookup.autotvin_reset_V.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "s_axis_tready_V"
#define AUTOTB_TVOUT_PC_s_axis_tready_V  "../tv/rtldatafile/rtl.switch_output_port_lookup.autotvout_s_axis_tready_V.dat"
// tvout file define: "m_axis_tdata_V"
#define AUTOTB_TVOUT_PC_m_axis_tdata_V  "../tv/rtldatafile/rtl.switch_output_port_lookup.autotvout_m_axis_tdata_V.dat"
// tvout file define: "m_axis_tkeep_V"
#define AUTOTB_TVOUT_PC_m_axis_tkeep_V  "../tv/rtldatafile/rtl.switch_output_port_lookup.autotvout_m_axis_tkeep_V.dat"
// tvout file define: "m_axis_tuser_V"
#define AUTOTB_TVOUT_PC_m_axis_tuser_V  "../tv/rtldatafile/rtl.switch_output_port_lookup.autotvout_m_axis_tuser_V.dat"
// tvout file define: "m_axis_tvalid_V"
#define AUTOTB_TVOUT_PC_m_axis_tvalid_V  "../tv/rtldatafile/rtl.switch_output_port_lookup.autotvout_m_axis_tvalid_V.dat"
// tvout file define: "m_axis_tlast_V"
#define AUTOTB_TVOUT_PC_m_axis_tlast_V  "../tv/rtldatafile/rtl.switch_output_port_lookup.autotvout_m_axis_tlast_V.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			s_axis_tdata_V_depth = 0;
			s_axis_tkeep_V_depth = 0;
			s_axis_tuser_V_depth = 0;
			s_axis_tvalid_V_depth = 0;
			s_axis_tready_V_depth = 0;
			s_axis_tlast_V_depth = 0;
			m_axis_tdata_V_depth = 0;
			m_axis_tkeep_V_depth = 0;
			m_axis_tuser_V_depth = 0;
			m_axis_tvalid_V_depth = 0;
			m_axis_tready_V_depth = 0;
			m_axis_tlast_V_depth = 0;
			reset_V_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{s_axis_tdata_V " << s_axis_tdata_V_depth << "}\n";
			total_list << "{s_axis_tkeep_V " << s_axis_tkeep_V_depth << "}\n";
			total_list << "{s_axis_tuser_V " << s_axis_tuser_V_depth << "}\n";
			total_list << "{s_axis_tvalid_V " << s_axis_tvalid_V_depth << "}\n";
			total_list << "{s_axis_tready_V " << s_axis_tready_V_depth << "}\n";
			total_list << "{s_axis_tlast_V " << s_axis_tlast_V_depth << "}\n";
			total_list << "{m_axis_tdata_V " << m_axis_tdata_V_depth << "}\n";
			total_list << "{m_axis_tkeep_V " << m_axis_tkeep_V_depth << "}\n";
			total_list << "{m_axis_tuser_V " << m_axis_tuser_V_depth << "}\n";
			total_list << "{m_axis_tvalid_V " << m_axis_tvalid_V_depth << "}\n";
			total_list << "{m_axis_tready_V " << m_axis_tready_V_depth << "}\n";
			total_list << "{m_axis_tlast_V " << m_axis_tlast_V_depth << "}\n";
			total_list << "{reset_V " << reset_V_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int s_axis_tdata_V_depth;
		int s_axis_tkeep_V_depth;
		int s_axis_tuser_V_depth;
		int s_axis_tvalid_V_depth;
		int s_axis_tready_V_depth;
		int s_axis_tlast_V_depth;
		int m_axis_tdata_V_depth;
		int m_axis_tkeep_V_depth;
		int m_axis_tuser_V_depth;
		int m_axis_tvalid_V_depth;
		int m_axis_tready_V_depth;
		int m_axis_tlast_V_depth;
		int reset_V_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern void switch_output_port_lookup (
ap_uint<256> s_axis_tdata,
ap_uint<32> s_axis_tkeep,
ap_uint<128> s_axis_tuser,
ap_uint<1> s_axis_tvalid,
ap_uint<1> (&s_axis_tready),
ap_uint<1> s_axis_tlast,
ap_uint<256> (&m_axis_tdata),
ap_uint<32> (&m_axis_tkeep),
ap_uint<128> (&m_axis_tuser),
ap_uint<1> (&m_axis_tvalid),
ap_uint<1> m_axis_tready,
ap_uint<1> (&m_axis_tlast),
ap_uint<1> reset);

void AESL_WRAP_switch_output_port_lookup (
ap_uint<256> s_axis_tdata,
ap_uint<32> s_axis_tkeep,
ap_uint<128> s_axis_tuser,
ap_uint<1> s_axis_tvalid,
ap_uint<1> (&s_axis_tready),
ap_uint<1> s_axis_tlast,
ap_uint<256> (&m_axis_tdata),
ap_uint<32> (&m_axis_tkeep),
ap_uint<128> (&m_axis_tuser),
ap_uint<1> (&m_axis_tvalid),
ap_uint<1> m_axis_tready,
ap_uint<1> (&m_axis_tlast),
ap_uint<1> reset)
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "s_axis_tready_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_s_axis_tready_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_s_axis_tready_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_s_axis_tready_V, AESL_token); // data

			sc_bv<1> *s_axis_tready_V_pc_buffer = new sc_bv<1>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 's_axis_tready_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 's_axis_tready_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					s_axis_tready_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_s_axis_tready_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_s_axis_tready_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: s_axis_tready_V
				{
					// bitslice(0, 0)
					// {
						// celement: s_axis_tready.V(0, 0)
						// {
							sc_lv<1>* s_axis_tready_V_lv0_0_0_1 = new sc_lv<1>[1];
						// }
					// }

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: s_axis_tready.V(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(s_axis_tready) != NULL) // check the null address if the c port is array or others
								{
									s_axis_tready_V_lv0_0_0_1[hls_map_index].range(0, 0) = sc_bv<1>(s_axis_tready_V_pc_buffer[hls_map_index].range(0, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: s_axis_tready.V(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : s_axis_tready
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : s_axis_tready
								// output_left_conversion : s_axis_tready
								// output_type_conversion : (s_axis_tready_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(s_axis_tready) != NULL) // check the null address if the c port is array or others
								{
									s_axis_tready = (s_axis_tready_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] s_axis_tready_V_pc_buffer;
		}

		// output port post check: "m_axis_tdata_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_m_axis_tdata_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_m_axis_tdata_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_m_axis_tdata_V, AESL_token); // data

			sc_bv<256> *m_axis_tdata_V_pc_buffer = new sc_bv<256>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'm_axis_tdata_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'm_axis_tdata_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					m_axis_tdata_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_m_axis_tdata_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_m_axis_tdata_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: m_axis_tdata_V
				{
					// bitslice(255, 0)
					// {
						// celement: m_axis_tdata.V(255, 0)
						// {
							sc_lv<256>* m_axis_tdata_V_lv0_0_0_1 = new sc_lv<256>[1];
						// }
					// }

					// bitslice(255, 0)
					{
						int hls_map_index = 0;
						// celement: m_axis_tdata.V(255, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(m_axis_tdata) != NULL) // check the null address if the c port is array or others
								{
									m_axis_tdata_V_lv0_0_0_1[hls_map_index].range(255, 0) = sc_bv<256>(m_axis_tdata_V_pc_buffer[hls_map_index].range(255, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(255, 0)
					{
						int hls_map_index = 0;
						// celement: m_axis_tdata.V(255, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : m_axis_tdata
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : m_axis_tdata
								// output_left_conversion : m_axis_tdata
								// output_type_conversion : (m_axis_tdata_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(m_axis_tdata) != NULL) // check the null address if the c port is array or others
								{
									m_axis_tdata = (m_axis_tdata_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] m_axis_tdata_V_pc_buffer;
		}

		// output port post check: "m_axis_tkeep_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_m_axis_tkeep_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_m_axis_tkeep_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_m_axis_tkeep_V, AESL_token); // data

			sc_bv<32> *m_axis_tkeep_V_pc_buffer = new sc_bv<32>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'm_axis_tkeep_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'm_axis_tkeep_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					m_axis_tkeep_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_m_axis_tkeep_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_m_axis_tkeep_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: m_axis_tkeep_V
				{
					// bitslice(31, 0)
					// {
						// celement: m_axis_tkeep.V(31, 0)
						// {
							sc_lv<32>* m_axis_tkeep_V_lv0_0_0_1 = new sc_lv<32>[1];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: m_axis_tkeep.V(31, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(m_axis_tkeep) != NULL) // check the null address if the c port is array or others
								{
									m_axis_tkeep_V_lv0_0_0_1[hls_map_index].range(31, 0) = sc_bv<32>(m_axis_tkeep_V_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: m_axis_tkeep.V(31, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : m_axis_tkeep
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : m_axis_tkeep
								// output_left_conversion : m_axis_tkeep
								// output_type_conversion : (m_axis_tkeep_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(m_axis_tkeep) != NULL) // check the null address if the c port is array or others
								{
									m_axis_tkeep = (m_axis_tkeep_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] m_axis_tkeep_V_pc_buffer;
		}

		// output port post check: "m_axis_tuser_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_m_axis_tuser_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_m_axis_tuser_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_m_axis_tuser_V, AESL_token); // data

			sc_bv<128> *m_axis_tuser_V_pc_buffer = new sc_bv<128>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'm_axis_tuser_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'm_axis_tuser_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					m_axis_tuser_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_m_axis_tuser_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_m_axis_tuser_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: m_axis_tuser_V
				{
					// bitslice(127, 0)
					// {
						// celement: m_axis_tuser.V(127, 0)
						// {
							sc_lv<128>* m_axis_tuser_V_lv0_0_0_1 = new sc_lv<128>[1];
						// }
					// }

					// bitslice(127, 0)
					{
						int hls_map_index = 0;
						// celement: m_axis_tuser.V(127, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(m_axis_tuser) != NULL) // check the null address if the c port is array or others
								{
									m_axis_tuser_V_lv0_0_0_1[hls_map_index].range(127, 0) = sc_bv<128>(m_axis_tuser_V_pc_buffer[hls_map_index].range(127, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(127, 0)
					{
						int hls_map_index = 0;
						// celement: m_axis_tuser.V(127, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : m_axis_tuser
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : m_axis_tuser
								// output_left_conversion : m_axis_tuser
								// output_type_conversion : (m_axis_tuser_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(m_axis_tuser) != NULL) // check the null address if the c port is array or others
								{
									m_axis_tuser = (m_axis_tuser_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] m_axis_tuser_V_pc_buffer;
		}

		// output port post check: "m_axis_tvalid_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_m_axis_tvalid_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_m_axis_tvalid_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_m_axis_tvalid_V, AESL_token); // data

			sc_bv<1> *m_axis_tvalid_V_pc_buffer = new sc_bv<1>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'm_axis_tvalid_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'm_axis_tvalid_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					m_axis_tvalid_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_m_axis_tvalid_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_m_axis_tvalid_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: m_axis_tvalid_V
				{
					// bitslice(0, 0)
					// {
						// celement: m_axis_tvalid.V(0, 0)
						// {
							sc_lv<1>* m_axis_tvalid_V_lv0_0_0_1 = new sc_lv<1>[1];
						// }
					// }

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: m_axis_tvalid.V(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(m_axis_tvalid) != NULL) // check the null address if the c port is array or others
								{
									m_axis_tvalid_V_lv0_0_0_1[hls_map_index].range(0, 0) = sc_bv<1>(m_axis_tvalid_V_pc_buffer[hls_map_index].range(0, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: m_axis_tvalid.V(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : m_axis_tvalid
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : m_axis_tvalid
								// output_left_conversion : m_axis_tvalid
								// output_type_conversion : (m_axis_tvalid_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(m_axis_tvalid) != NULL) // check the null address if the c port is array or others
								{
									m_axis_tvalid = (m_axis_tvalid_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] m_axis_tvalid_V_pc_buffer;
		}

		// output port post check: "m_axis_tlast_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_m_axis_tlast_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_m_axis_tlast_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_m_axis_tlast_V, AESL_token); // data

			sc_bv<1> *m_axis_tlast_V_pc_buffer = new sc_bv<1>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'm_axis_tlast_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'm_axis_tlast_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					m_axis_tlast_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_m_axis_tlast_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_m_axis_tlast_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: m_axis_tlast_V
				{
					// bitslice(0, 0)
					// {
						// celement: m_axis_tlast.V(0, 0)
						// {
							sc_lv<1>* m_axis_tlast_V_lv0_0_0_1 = new sc_lv<1>[1];
						// }
					// }

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: m_axis_tlast.V(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(m_axis_tlast) != NULL) // check the null address if the c port is array or others
								{
									m_axis_tlast_V_lv0_0_0_1[hls_map_index].range(0, 0) = sc_bv<1>(m_axis_tlast_V_pc_buffer[hls_map_index].range(0, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: m_axis_tlast.V(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : m_axis_tlast
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : m_axis_tlast
								// output_left_conversion : m_axis_tlast
								// output_type_conversion : (m_axis_tlast_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(m_axis_tlast) != NULL) // check the null address if the c port is array or others
								{
									m_axis_tlast = (m_axis_tlast_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] m_axis_tlast_V_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "s_axis_tdata_V"
		char* tvin_s_axis_tdata_V = new char[69];
		aesl_fh.touch(AUTOTB_TVIN_s_axis_tdata_V);

		// "s_axis_tkeep_V"
		char* tvin_s_axis_tkeep_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_s_axis_tkeep_V);

		// "s_axis_tuser_V"
		char* tvin_s_axis_tuser_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_s_axis_tuser_V);

		// "s_axis_tvalid_V"
		char* tvin_s_axis_tvalid_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_s_axis_tvalid_V);

		// "s_axis_tready_V"
		char* tvout_s_axis_tready_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_s_axis_tready_V);

		// "s_axis_tlast_V"
		char* tvin_s_axis_tlast_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_s_axis_tlast_V);

		// "m_axis_tdata_V"
		char* tvout_m_axis_tdata_V = new char[69];
		aesl_fh.touch(AUTOTB_TVOUT_m_axis_tdata_V);

		// "m_axis_tkeep_V"
		char* tvout_m_axis_tkeep_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_m_axis_tkeep_V);

		// "m_axis_tuser_V"
		char* tvout_m_axis_tuser_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_m_axis_tuser_V);

		// "m_axis_tvalid_V"
		char* tvout_m_axis_tvalid_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_m_axis_tvalid_V);

		// "m_axis_tready_V"
		char* tvin_m_axis_tready_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_m_axis_tready_V);

		// "m_axis_tlast_V"
		char* tvout_m_axis_tlast_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_m_axis_tlast_V);

		// "reset_V"
		char* tvin_reset_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_reset_V);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_s_axis_tdata_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_s_axis_tdata_V, tvin_s_axis_tdata_V);

		sc_bv<256> s_axis_tdata_V_tvin_wrapc_buffer;

		// RTL Name: s_axis_tdata_V
		{
			// bitslice(255, 0)
			{
				// celement: s_axis_tdata.V(255, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : s_axis_tdata
						// sub_1st_elem          : 
						// ori_name_1st_elem     : s_axis_tdata
						// regulate_c_name       : s_axis_tdata_V
						// input_type_conversion : (s_axis_tdata).to_string(2).c_str()
						if (&(s_axis_tdata) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<256> s_axis_tdata_V_tmp_mem;
							s_axis_tdata_V_tmp_mem = (s_axis_tdata).to_string(2).c_str();
							s_axis_tdata_V_tvin_wrapc_buffer.range(255, 0) = s_axis_tdata_V_tmp_mem.range(255, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_s_axis_tdata_V, "%s\n", (s_axis_tdata_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_s_axis_tdata_V, tvin_s_axis_tdata_V);
		}

		tcl_file.set_num(1, &tcl_file.s_axis_tdata_V_depth);
		sprintf(tvin_s_axis_tdata_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_s_axis_tdata_V, tvin_s_axis_tdata_V);

		// [[transaction]]
		sprintf(tvin_s_axis_tkeep_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_s_axis_tkeep_V, tvin_s_axis_tkeep_V);

		sc_bv<32> s_axis_tkeep_V_tvin_wrapc_buffer;

		// RTL Name: s_axis_tkeep_V
		{
			// bitslice(31, 0)
			{
				// celement: s_axis_tkeep.V(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : s_axis_tkeep
						// sub_1st_elem          : 
						// ori_name_1st_elem     : s_axis_tkeep
						// regulate_c_name       : s_axis_tkeep_V
						// input_type_conversion : (s_axis_tkeep).to_string(2).c_str()
						if (&(s_axis_tkeep) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> s_axis_tkeep_V_tmp_mem;
							s_axis_tkeep_V_tmp_mem = (s_axis_tkeep).to_string(2).c_str();
							s_axis_tkeep_V_tvin_wrapc_buffer.range(31, 0) = s_axis_tkeep_V_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_s_axis_tkeep_V, "%s\n", (s_axis_tkeep_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_s_axis_tkeep_V, tvin_s_axis_tkeep_V);
		}

		tcl_file.set_num(1, &tcl_file.s_axis_tkeep_V_depth);
		sprintf(tvin_s_axis_tkeep_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_s_axis_tkeep_V, tvin_s_axis_tkeep_V);

		// [[transaction]]
		sprintf(tvin_s_axis_tuser_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_s_axis_tuser_V, tvin_s_axis_tuser_V);

		sc_bv<128> s_axis_tuser_V_tvin_wrapc_buffer;

		// RTL Name: s_axis_tuser_V
		{
			// bitslice(127, 0)
			{
				// celement: s_axis_tuser.V(127, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : s_axis_tuser
						// sub_1st_elem          : 
						// ori_name_1st_elem     : s_axis_tuser
						// regulate_c_name       : s_axis_tuser_V
						// input_type_conversion : (s_axis_tuser).to_string(2).c_str()
						if (&(s_axis_tuser) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<128> s_axis_tuser_V_tmp_mem;
							s_axis_tuser_V_tmp_mem = (s_axis_tuser).to_string(2).c_str();
							s_axis_tuser_V_tvin_wrapc_buffer.range(127, 0) = s_axis_tuser_V_tmp_mem.range(127, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_s_axis_tuser_V, "%s\n", (s_axis_tuser_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_s_axis_tuser_V, tvin_s_axis_tuser_V);
		}

		tcl_file.set_num(1, &tcl_file.s_axis_tuser_V_depth);
		sprintf(tvin_s_axis_tuser_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_s_axis_tuser_V, tvin_s_axis_tuser_V);

		// [[transaction]]
		sprintf(tvin_s_axis_tvalid_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_s_axis_tvalid_V, tvin_s_axis_tvalid_V);

		sc_bv<1> s_axis_tvalid_V_tvin_wrapc_buffer;

		// RTL Name: s_axis_tvalid_V
		{
			// bitslice(0, 0)
			{
				// celement: s_axis_tvalid.V(0, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : s_axis_tvalid
						// sub_1st_elem          : 
						// ori_name_1st_elem     : s_axis_tvalid
						// regulate_c_name       : s_axis_tvalid_V
						// input_type_conversion : (s_axis_tvalid).to_string(2).c_str()
						if (&(s_axis_tvalid) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> s_axis_tvalid_V_tmp_mem;
							s_axis_tvalid_V_tmp_mem = (s_axis_tvalid).to_string(2).c_str();
							s_axis_tvalid_V_tvin_wrapc_buffer.range(0, 0) = s_axis_tvalid_V_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_s_axis_tvalid_V, "%s\n", (s_axis_tvalid_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_s_axis_tvalid_V, tvin_s_axis_tvalid_V);
		}

		tcl_file.set_num(1, &tcl_file.s_axis_tvalid_V_depth);
		sprintf(tvin_s_axis_tvalid_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_s_axis_tvalid_V, tvin_s_axis_tvalid_V);

		// [[transaction]]
		sprintf(tvin_s_axis_tlast_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_s_axis_tlast_V, tvin_s_axis_tlast_V);

		sc_bv<1> s_axis_tlast_V_tvin_wrapc_buffer;

		// RTL Name: s_axis_tlast_V
		{
			// bitslice(0, 0)
			{
				// celement: s_axis_tlast.V(0, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : s_axis_tlast
						// sub_1st_elem          : 
						// ori_name_1st_elem     : s_axis_tlast
						// regulate_c_name       : s_axis_tlast_V
						// input_type_conversion : (s_axis_tlast).to_string(2).c_str()
						if (&(s_axis_tlast) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> s_axis_tlast_V_tmp_mem;
							s_axis_tlast_V_tmp_mem = (s_axis_tlast).to_string(2).c_str();
							s_axis_tlast_V_tvin_wrapc_buffer.range(0, 0) = s_axis_tlast_V_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_s_axis_tlast_V, "%s\n", (s_axis_tlast_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_s_axis_tlast_V, tvin_s_axis_tlast_V);
		}

		tcl_file.set_num(1, &tcl_file.s_axis_tlast_V_depth);
		sprintf(tvin_s_axis_tlast_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_s_axis_tlast_V, tvin_s_axis_tlast_V);

		// [[transaction]]
		sprintf(tvin_m_axis_tready_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_m_axis_tready_V, tvin_m_axis_tready_V);

		sc_bv<1> m_axis_tready_V_tvin_wrapc_buffer;

		// RTL Name: m_axis_tready_V
		{
			// bitslice(0, 0)
			{
				// celement: m_axis_tready.V(0, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : m_axis_tready
						// sub_1st_elem          : 
						// ori_name_1st_elem     : m_axis_tready
						// regulate_c_name       : m_axis_tready_V
						// input_type_conversion : (m_axis_tready).to_string(2).c_str()
						if (&(m_axis_tready) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> m_axis_tready_V_tmp_mem;
							m_axis_tready_V_tmp_mem = (m_axis_tready).to_string(2).c_str();
							m_axis_tready_V_tvin_wrapc_buffer.range(0, 0) = m_axis_tready_V_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_m_axis_tready_V, "%s\n", (m_axis_tready_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_m_axis_tready_V, tvin_m_axis_tready_V);
		}

		tcl_file.set_num(1, &tcl_file.m_axis_tready_V_depth);
		sprintf(tvin_m_axis_tready_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_m_axis_tready_V, tvin_m_axis_tready_V);

		// [[transaction]]
		sprintf(tvin_reset_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_reset_V, tvin_reset_V);

		sc_bv<1> reset_V_tvin_wrapc_buffer;

		// RTL Name: reset_V
		{
			// bitslice(0, 0)
			{
				// celement: reset.V(0, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : reset
						// sub_1st_elem          : 
						// ori_name_1st_elem     : reset
						// regulate_c_name       : reset_V
						// input_type_conversion : (reset).to_string(2).c_str()
						if (&(reset) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> reset_V_tmp_mem;
							reset_V_tmp_mem = (reset).to_string(2).c_str();
							reset_V_tvin_wrapc_buffer.range(0, 0) = reset_V_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_reset_V, "%s\n", (reset_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_reset_V, tvin_reset_V);
		}

		tcl_file.set_num(1, &tcl_file.reset_V_depth);
		sprintf(tvin_reset_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_reset_V, tvin_reset_V);

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		switch_output_port_lookup(s_axis_tdata, s_axis_tkeep, s_axis_tuser, s_axis_tvalid, s_axis_tready, s_axis_tlast, m_axis_tdata, m_axis_tkeep, m_axis_tuser, m_axis_tvalid, m_axis_tready, m_axis_tlast, reset);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_s_axis_tready_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_s_axis_tready_V, tvout_s_axis_tready_V);

		sc_bv<1>* s_axis_tready_V_tvout_wrapc_buffer = new sc_bv<1>[1];

		// RTL Name: s_axis_tready_V
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: s_axis_tready.V(0, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : s_axis_tready
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : s_axis_tready
						// regulate_c_name       : s_axis_tready_V
						// input_type_conversion : (s_axis_tready).to_string(2).c_str()
						if (&(s_axis_tready) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> s_axis_tready_V_tmp_mem;
							s_axis_tready_V_tmp_mem = (s_axis_tready).to_string(2).c_str();
							s_axis_tready_V_tvout_wrapc_buffer[hls_map_index].range(0, 0) = s_axis_tready_V_tmp_mem.range(0, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_s_axis_tready_V, "%s\n", (s_axis_tready_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_s_axis_tready_V, tvout_s_axis_tready_V);
		}

		tcl_file.set_num(1, &tcl_file.s_axis_tready_V_depth);
		sprintf(tvout_s_axis_tready_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_s_axis_tready_V, tvout_s_axis_tready_V);

		// release memory allocation
		delete [] s_axis_tready_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_m_axis_tdata_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_m_axis_tdata_V, tvout_m_axis_tdata_V);

		sc_bv<256>* m_axis_tdata_V_tvout_wrapc_buffer = new sc_bv<256>[1];

		// RTL Name: m_axis_tdata_V
		{
			// bitslice(255, 0)
			{
				int hls_map_index = 0;
				// celement: m_axis_tdata.V(255, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : m_axis_tdata
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : m_axis_tdata
						// regulate_c_name       : m_axis_tdata_V
						// input_type_conversion : (m_axis_tdata).to_string(2).c_str()
						if (&(m_axis_tdata) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<256> m_axis_tdata_V_tmp_mem;
							m_axis_tdata_V_tmp_mem = (m_axis_tdata).to_string(2).c_str();
							m_axis_tdata_V_tvout_wrapc_buffer[hls_map_index].range(255, 0) = m_axis_tdata_V_tmp_mem.range(255, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_m_axis_tdata_V, "%s\n", (m_axis_tdata_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_m_axis_tdata_V, tvout_m_axis_tdata_V);
		}

		tcl_file.set_num(1, &tcl_file.m_axis_tdata_V_depth);
		sprintf(tvout_m_axis_tdata_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_m_axis_tdata_V, tvout_m_axis_tdata_V);

		// release memory allocation
		delete [] m_axis_tdata_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_m_axis_tkeep_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_m_axis_tkeep_V, tvout_m_axis_tkeep_V);

		sc_bv<32>* m_axis_tkeep_V_tvout_wrapc_buffer = new sc_bv<32>[1];

		// RTL Name: m_axis_tkeep_V
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: m_axis_tkeep.V(31, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : m_axis_tkeep
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : m_axis_tkeep
						// regulate_c_name       : m_axis_tkeep_V
						// input_type_conversion : (m_axis_tkeep).to_string(2).c_str()
						if (&(m_axis_tkeep) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> m_axis_tkeep_V_tmp_mem;
							m_axis_tkeep_V_tmp_mem = (m_axis_tkeep).to_string(2).c_str();
							m_axis_tkeep_V_tvout_wrapc_buffer[hls_map_index].range(31, 0) = m_axis_tkeep_V_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_m_axis_tkeep_V, "%s\n", (m_axis_tkeep_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_m_axis_tkeep_V, tvout_m_axis_tkeep_V);
		}

		tcl_file.set_num(1, &tcl_file.m_axis_tkeep_V_depth);
		sprintf(tvout_m_axis_tkeep_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_m_axis_tkeep_V, tvout_m_axis_tkeep_V);

		// release memory allocation
		delete [] m_axis_tkeep_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_m_axis_tuser_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_m_axis_tuser_V, tvout_m_axis_tuser_V);

		sc_bv<128>* m_axis_tuser_V_tvout_wrapc_buffer = new sc_bv<128>[1];

		// RTL Name: m_axis_tuser_V
		{
			// bitslice(127, 0)
			{
				int hls_map_index = 0;
				// celement: m_axis_tuser.V(127, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : m_axis_tuser
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : m_axis_tuser
						// regulate_c_name       : m_axis_tuser_V
						// input_type_conversion : (m_axis_tuser).to_string(2).c_str()
						if (&(m_axis_tuser) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<128> m_axis_tuser_V_tmp_mem;
							m_axis_tuser_V_tmp_mem = (m_axis_tuser).to_string(2).c_str();
							m_axis_tuser_V_tvout_wrapc_buffer[hls_map_index].range(127, 0) = m_axis_tuser_V_tmp_mem.range(127, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_m_axis_tuser_V, "%s\n", (m_axis_tuser_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_m_axis_tuser_V, tvout_m_axis_tuser_V);
		}

		tcl_file.set_num(1, &tcl_file.m_axis_tuser_V_depth);
		sprintf(tvout_m_axis_tuser_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_m_axis_tuser_V, tvout_m_axis_tuser_V);

		// release memory allocation
		delete [] m_axis_tuser_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_m_axis_tvalid_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_m_axis_tvalid_V, tvout_m_axis_tvalid_V);

		sc_bv<1>* m_axis_tvalid_V_tvout_wrapc_buffer = new sc_bv<1>[1];

		// RTL Name: m_axis_tvalid_V
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: m_axis_tvalid.V(0, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : m_axis_tvalid
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : m_axis_tvalid
						// regulate_c_name       : m_axis_tvalid_V
						// input_type_conversion : (m_axis_tvalid).to_string(2).c_str()
						if (&(m_axis_tvalid) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> m_axis_tvalid_V_tmp_mem;
							m_axis_tvalid_V_tmp_mem = (m_axis_tvalid).to_string(2).c_str();
							m_axis_tvalid_V_tvout_wrapc_buffer[hls_map_index].range(0, 0) = m_axis_tvalid_V_tmp_mem.range(0, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_m_axis_tvalid_V, "%s\n", (m_axis_tvalid_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_m_axis_tvalid_V, tvout_m_axis_tvalid_V);
		}

		tcl_file.set_num(1, &tcl_file.m_axis_tvalid_V_depth);
		sprintf(tvout_m_axis_tvalid_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_m_axis_tvalid_V, tvout_m_axis_tvalid_V);

		// release memory allocation
		delete [] m_axis_tvalid_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_m_axis_tlast_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_m_axis_tlast_V, tvout_m_axis_tlast_V);

		sc_bv<1>* m_axis_tlast_V_tvout_wrapc_buffer = new sc_bv<1>[1];

		// RTL Name: m_axis_tlast_V
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: m_axis_tlast.V(0, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : m_axis_tlast
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : m_axis_tlast
						// regulate_c_name       : m_axis_tlast_V
						// input_type_conversion : (m_axis_tlast).to_string(2).c_str()
						if (&(m_axis_tlast) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> m_axis_tlast_V_tmp_mem;
							m_axis_tlast_V_tmp_mem = (m_axis_tlast).to_string(2).c_str();
							m_axis_tlast_V_tvout_wrapc_buffer[hls_map_index].range(0, 0) = m_axis_tlast_V_tmp_mem.range(0, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_m_axis_tlast_V, "%s\n", (m_axis_tlast_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_m_axis_tlast_V, tvout_m_axis_tlast_V);
		}

		tcl_file.set_num(1, &tcl_file.m_axis_tlast_V_depth);
		sprintf(tvout_m_axis_tlast_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_m_axis_tlast_V, tvout_m_axis_tlast_V);

		// release memory allocation
		delete [] m_axis_tlast_V_tvout_wrapc_buffer;

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "s_axis_tdata_V"
		delete [] tvin_s_axis_tdata_V;
		// release memory allocation: "s_axis_tkeep_V"
		delete [] tvin_s_axis_tkeep_V;
		// release memory allocation: "s_axis_tuser_V"
		delete [] tvin_s_axis_tuser_V;
		// release memory allocation: "s_axis_tvalid_V"
		delete [] tvin_s_axis_tvalid_V;
		// release memory allocation: "s_axis_tready_V"
		delete [] tvout_s_axis_tready_V;
		// release memory allocation: "s_axis_tlast_V"
		delete [] tvin_s_axis_tlast_V;
		// release memory allocation: "m_axis_tdata_V"
		delete [] tvout_m_axis_tdata_V;
		// release memory allocation: "m_axis_tkeep_V"
		delete [] tvout_m_axis_tkeep_V;
		// release memory allocation: "m_axis_tuser_V"
		delete [] tvout_m_axis_tuser_V;
		// release memory allocation: "m_axis_tvalid_V"
		delete [] tvout_m_axis_tvalid_V;
		// release memory allocation: "m_axis_tready_V"
		delete [] tvin_m_axis_tready_V;
		// release memory allocation: "m_axis_tlast_V"
		delete [] tvout_m_axis_tlast_V;
		// release memory allocation: "reset_V"
		delete [] tvin_reset_V;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

