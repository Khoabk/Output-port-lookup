// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _eth_HH_
#define _eth_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct eth : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<256> > tdata_V;
    sc_in< sc_lv<128> > tuser_V;
    sc_in< sc_lv<1> > valid_V;
    sc_in< sc_lv<1> > tlast_V;
    sc_in< sc_lv<1> > reset_V;
    sc_out< sc_lv<48> > ap_return_0;
    sc_out< sc_lv<48> > ap_return_1;
    sc_out< sc_lv<8> > ap_return_2;
    sc_out< sc_lv<1> > ap_return_3;


    // Module declarations
    eth(sc_module_name name);
    SC_HAS_PROCESS(eth);

    ~eth();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > state;
    sc_signal< sc_lv<1> > ap_phi_mux_write_flag3_1_phi_fu_77_p8;
    sc_signal< sc_lv<1> > reset_V_read_read_fu_44_p2;
    sc_signal< sc_lv<1> > state_load_load_fu_162_p1;
    sc_signal< sc_lv<1> > valid_V_read_read_fu_56_p2;
    sc_signal< sc_lv<48> > ap_phi_mux_src_mac_V_1_phi_fu_94_p8;
    sc_signal< sc_lv<48> > ap_phi_mux_dst_mac_V_1_phi_fu_110_p8;
    sc_signal< sc_lv<48> > tmp_fu_177_p1;
    sc_signal< sc_lv<8> > ap_phi_mux_src_port_V_1_phi_fu_126_p8;
    sc_signal< sc_lv<1> > ap_phi_mux_eth_done_V_1_phi_fu_142_p8;
    sc_signal< sc_lv<1> > brmerge_demorgan_fu_199_p2;
    sc_signal< sc_lv<48> > ssdm_int_V_write_ass_fu_205_p3;
    sc_signal< sc_lv<48> > ssdm_int_V_write_ass_2_fu_213_p3;
    sc_signal< sc_lv<8> > ssdm_int_V_write_ass_3_fu_221_p3;
    sc_signal< sc_lv<1> > ssdm_int_V_write_ass_4_fu_229_p2;
    sc_signal< sc_lv<48> > ap_return_0_preg;
    sc_signal< sc_lv<48> > ap_return_1_preg;
    sc_signal< sc_lv<8> > ap_return_2_preg;
    sc_signal< sc_lv<1> > ap_return_3_preg;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<48> ap_const_lv48_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_30;
    static const sc_lv<32> ap_const_lv32_5F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_dst_mac_V_1_phi_fu_110_p8();
    void thread_ap_phi_mux_eth_done_V_1_phi_fu_142_p8();
    void thread_ap_phi_mux_src_mac_V_1_phi_fu_94_p8();
    void thread_ap_phi_mux_src_port_V_1_phi_fu_126_p8();
    void thread_ap_phi_mux_write_flag3_1_phi_fu_77_p8();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_brmerge_demorgan_fu_199_p2();
    void thread_reset_V_read_read_fu_44_p2();
    void thread_ssdm_int_V_write_ass_2_fu_213_p3();
    void thread_ssdm_int_V_write_ass_3_fu_221_p3();
    void thread_ssdm_int_V_write_ass_4_fu_229_p2();
    void thread_ssdm_int_V_write_ass_fu_205_p3();
    void thread_state_load_load_fu_162_p1();
    void thread_tmp_fu_177_p1();
    void thread_valid_V_read_read_fu_56_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
