-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity eth is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tdata_V : IN STD_LOGIC_VECTOR (255 downto 0);
    tuser_V : IN STD_LOGIC_VECTOR (127 downto 0);
    valid_V : IN STD_LOGIC_VECTOR (0 downto 0);
    tlast_V : IN STD_LOGIC_VECTOR (0 downto 0);
    reset_V : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (47 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (47 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of eth is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal state : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_phi_mux_write_flag3_1_phi_fu_77_p8 : STD_LOGIC_VECTOR (0 downto 0);
    signal reset_V_read_read_fu_44_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_load_load_fu_162_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal valid_V_read_read_fu_56_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_src_mac_V_1_phi_fu_94_p8 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_phi_mux_dst_mac_V_1_phi_fu_110_p8 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_fu_177_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_phi_mux_src_port_V_1_phi_fu_126_p8 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_eth_done_V_1_phi_fu_142_p8 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_demorgan_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ssdm_int_V_write_ass_fu_205_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal ssdm_int_V_write_ass_2_fu_213_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal ssdm_int_V_write_ass_3_fu_221_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ssdm_int_V_write_ass_4_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv48_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_0_preg <= ssdm_int_V_write_ass_fu_205_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv48_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_1_preg <= ssdm_int_V_write_ass_2_fu_213_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv8_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_2_preg <= ssdm_int_V_write_ass_3_fu_221_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv1_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_3_preg <= ssdm_int_V_write_ass_4_fu_229_p2;
                end if; 
            end if;
        end if;
    end process;


    state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_start = ap_const_logic_1) and (brmerge_demorgan_fu_199_p2 = ap_const_lv1_1) and (state_load_load_fu_162_p1 = ap_const_lv1_1) and (reset_V_read_read_fu_44_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (reset_V_read_read_fu_44_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                state <= ap_const_lv1_0;
            elsif (((ap_start = ap_const_logic_1) and (valid_V_read_read_fu_56_p2 = ap_const_lv1_1) and (state_load_load_fu_162_p1 = ap_const_lv1_0) and (reset_V_read_read_fu_44_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                state <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_dst_mac_V_1_phi_fu_110_p8_assign_proc : process(ap_CS_fsm_state1, reset_V_read_read_fu_44_p2, state_load_load_fu_162_p1, valid_V_read_read_fu_56_p2, tmp_fu_177_p1)
    begin
        if (((valid_V_read_read_fu_56_p2 = ap_const_lv1_1) and (state_load_load_fu_162_p1 = ap_const_lv1_0) and (reset_V_read_read_fu_44_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_dst_mac_V_1_phi_fu_110_p8 <= tmp_fu_177_p1;
        elsif ((((state_load_load_fu_162_p1 = ap_const_lv1_1) and (reset_V_read_read_fu_44_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((reset_V_read_read_fu_44_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_dst_mac_V_1_phi_fu_110_p8 <= ap_const_lv48_0;
        else 
            ap_phi_mux_dst_mac_V_1_phi_fu_110_p8 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_eth_done_V_1_phi_fu_142_p8_assign_proc : process(ap_CS_fsm_state1, reset_V_read_read_fu_44_p2, state_load_load_fu_162_p1, valid_V_read_read_fu_56_p2)
    begin
        if ((((valid_V_read_read_fu_56_p2 = ap_const_lv1_0) and (state_load_load_fu_162_p1 = ap_const_lv1_0) and (reset_V_read_read_fu_44_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((valid_V_read_read_fu_56_p2 = ap_const_lv1_1) and (state_load_load_fu_162_p1 = ap_const_lv1_0) and (reset_V_read_read_fu_44_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_eth_done_V_1_phi_fu_142_p8 <= ap_const_lv1_1;
        elsif ((((state_load_load_fu_162_p1 = ap_const_lv1_1) and (reset_V_read_read_fu_44_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((reset_V_read_read_fu_44_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_eth_done_V_1_phi_fu_142_p8 <= ap_const_lv1_0;
        else 
            ap_phi_mux_eth_done_V_1_phi_fu_142_p8 <= "X";
        end if; 
    end process;


    ap_phi_mux_src_mac_V_1_phi_fu_94_p8_assign_proc : process(ap_CS_fsm_state1, tdata_V, reset_V_read_read_fu_44_p2, state_load_load_fu_162_p1, valid_V_read_read_fu_56_p2)
    begin
        if (((valid_V_read_read_fu_56_p2 = ap_const_lv1_1) and (state_load_load_fu_162_p1 = ap_const_lv1_0) and (reset_V_read_read_fu_44_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_src_mac_V_1_phi_fu_94_p8 <= tdata_V(95 downto 48);
        elsif ((((state_load_load_fu_162_p1 = ap_const_lv1_1) and (reset_V_read_read_fu_44_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((reset_V_read_read_fu_44_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_src_mac_V_1_phi_fu_94_p8 <= ap_const_lv48_0;
        else 
            ap_phi_mux_src_mac_V_1_phi_fu_94_p8 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_src_port_V_1_phi_fu_126_p8_assign_proc : process(ap_CS_fsm_state1, tuser_V, reset_V_read_read_fu_44_p2, state_load_load_fu_162_p1, valid_V_read_read_fu_56_p2)
    begin
        if (((valid_V_read_read_fu_56_p2 = ap_const_lv1_1) and (state_load_load_fu_162_p1 = ap_const_lv1_0) and (reset_V_read_read_fu_44_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_src_port_V_1_phi_fu_126_p8 <= tuser_V(23 downto 16);
        elsif ((((state_load_load_fu_162_p1 = ap_const_lv1_1) and (reset_V_read_read_fu_44_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((reset_V_read_read_fu_44_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_src_port_V_1_phi_fu_126_p8 <= ap_const_lv8_0;
        else 
            ap_phi_mux_src_port_V_1_phi_fu_126_p8 <= "XXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_write_flag3_1_phi_fu_77_p8_assign_proc : process(ap_CS_fsm_state1, reset_V_read_read_fu_44_p2, state_load_load_fu_162_p1, valid_V_read_read_fu_56_p2)
    begin
        if (((valid_V_read_read_fu_56_p2 = ap_const_lv1_0) and (state_load_load_fu_162_p1 = ap_const_lv1_0) and (reset_V_read_read_fu_44_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_write_flag3_1_phi_fu_77_p8 <= ap_const_lv1_0;
        elsif ((((valid_V_read_read_fu_56_p2 = ap_const_lv1_1) and (state_load_load_fu_162_p1 = ap_const_lv1_0) and (reset_V_read_read_fu_44_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((state_load_load_fu_162_p1 = ap_const_lv1_1) and (reset_V_read_read_fu_44_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((reset_V_read_read_fu_44_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_write_flag3_1_phi_fu_77_p8 <= ap_const_lv1_1;
        else 
            ap_phi_mux_write_flag3_1_phi_fu_77_p8 <= "X";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_start, ap_CS_fsm_state1, ssdm_int_V_write_ass_fu_205_p3, ap_return_0_preg)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_0 <= ssdm_int_V_write_ass_fu_205_p3;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_start, ap_CS_fsm_state1, ssdm_int_V_write_ass_2_fu_213_p3, ap_return_1_preg)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_1 <= ssdm_int_V_write_ass_2_fu_213_p3;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_start, ap_CS_fsm_state1, ssdm_int_V_write_ass_3_fu_221_p3, ap_return_2_preg)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_2 <= ssdm_int_V_write_ass_3_fu_221_p3;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_start, ap_CS_fsm_state1, ssdm_int_V_write_ass_4_fu_229_p2, ap_return_3_preg)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_3 <= ssdm_int_V_write_ass_4_fu_229_p2;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;

    brmerge_demorgan_fu_199_p2 <= (valid_V and tlast_V);
    reset_V_read_read_fu_44_p2 <= reset_V;
    ssdm_int_V_write_ass_2_fu_213_p3 <= 
        ap_phi_mux_src_mac_V_1_phi_fu_94_p8 when (ap_phi_mux_write_flag3_1_phi_fu_77_p8(0) = '1') else 
        ap_const_lv48_0;
    ssdm_int_V_write_ass_3_fu_221_p3 <= 
        ap_phi_mux_src_port_V_1_phi_fu_126_p8 when (ap_phi_mux_write_flag3_1_phi_fu_77_p8(0) = '1') else 
        ap_const_lv8_0;
    ssdm_int_V_write_ass_4_fu_229_p2 <= (ap_phi_mux_write_flag3_1_phi_fu_77_p8 and ap_phi_mux_eth_done_V_1_phi_fu_142_p8);
    ssdm_int_V_write_ass_fu_205_p3 <= 
        ap_phi_mux_dst_mac_V_1_phi_fu_110_p8 when (ap_phi_mux_write_flag3_1_phi_fu_77_p8(0) = '1') else 
        ap_const_lv48_0;
    state_load_load_fu_162_p1 <= state;
    tmp_fu_177_p1 <= tdata_V(48 - 1 downto 0);
    valid_V_read_read_fu_56_p2 <= valid_V;
end behav;
