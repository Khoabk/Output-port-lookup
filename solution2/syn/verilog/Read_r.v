// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Read_r (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axis_tready_V,
        reset_V,
        Queue_ap_axis_size_i,
        Queue_ap_axis_size_o,
        Queue_ap_axis_size_o_ap_vld,
        Queue_wr_pos_V_1,
        Queue_wr_pos_V_1_ap_vld,
        Queue_rd_pos_V_1_i,
        Queue_rd_pos_V_1_o,
        Queue_rd_pos_V_1_o_ap_vld,
        Queue_size_i,
        Queue_size_o,
        Queue_size_o_ap_vld,
        Queue_wr_pos_V,
        Queue_wr_pos_V_ap_vld,
        Queue_rd_pos_V_i,
        Queue_rd_pos_V_o,
        Queue_rd_pos_V_o_ap_vld,
        Queue_buffer_packet_address0,
        Queue_buffer_packet_ce0,
        Queue_buffer_packet_q0,
        Queue_buffer_V_address0,
        Queue_buffer_V_ce0,
        Queue_buffer_V_q0,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] m_axis_tready_V;
input  [0:0] reset_V;
input  [31:0] Queue_ap_axis_size_i;
output  [31:0] Queue_ap_axis_size_o;
output   Queue_ap_axis_size_o_ap_vld;
output  [3:0] Queue_wr_pos_V_1;
output   Queue_wr_pos_V_1_ap_vld;
input  [3:0] Queue_rd_pos_V_1_i;
output  [3:0] Queue_rd_pos_V_1_o;
output   Queue_rd_pos_V_1_o_ap_vld;
input  [31:0] Queue_size_i;
output  [31:0] Queue_size_o;
output   Queue_size_o_ap_vld;
output  [3:0] Queue_wr_pos_V;
output   Queue_wr_pos_V_ap_vld;
input  [3:0] Queue_rd_pos_V_i;
output  [3:0] Queue_rd_pos_V_o;
output   Queue_rd_pos_V_o_ap_vld;
output  [3:0] Queue_buffer_packet_address0;
output   Queue_buffer_packet_ce0;
input  [416:0] Queue_buffer_packet_q0;
output  [3:0] Queue_buffer_V_address0;
output   Queue_buffer_V_ce0;
input  [7:0] Queue_buffer_V_q0;
output  [255:0] ap_return_0;
output  [31:0] ap_return_1;
output  [127:0] ap_return_2;
output  [0:0] ap_return_3;
output  [0:0] ap_return_4;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] Queue_ap_axis_size_o;
reg Queue_ap_axis_size_o_ap_vld;
reg Queue_wr_pos_V_1_ap_vld;
reg[3:0] Queue_rd_pos_V_1_o;
reg Queue_rd_pos_V_1_o_ap_vld;
reg[31:0] Queue_size_o;
reg Queue_size_o_ap_vld;
reg Queue_wr_pos_V_ap_vld;
reg[3:0] Queue_rd_pos_V_o;
reg Queue_rd_pos_V_o_ap_vld;
reg Queue_buffer_packet_ce0;
reg Queue_buffer_V_ce0;
reg[255:0] ap_return_0;
reg[31:0] ap_return_1;
reg[127:0] ap_return_2;
reg[0:0] ap_return_3;
reg[0:0] ap_return_4;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] state_1;
wire   [0:0] reset_V_read_read_fu_64_p2;
reg   [3:0] Queue_rd_pos_V_1_lo_reg_452;
wire    ap_CS_fsm_state2;
reg   [3:0] Queue_rd_pos_V_load_reg_462;
wire   [63:0] tmp_i_fu_142_p1;
wire   [63:0] tmp_i2_fu_151_p1;
wire   [31:0] p_state_1_new_1_i_cas_fu_328_p1;
wire    ap_CS_fsm_state3;
wire   [0:0] p_state_1_flag_1_i_fu_318_p2;
wire   [31:0] Queue_size_assign_i_fu_349_p2;
wire   [0:0] r_V_fu_344_p2;
wire   [3:0] Queue_rd_pos_V_assi_fu_361_p2;
wire   [31:0] Queue_size_assign_i_2_fu_372_p2;
wire   [0:0] dst_port_rd_V_fu_312_p2;
wire   [3:0] Queue_rd_pos_V_assi_1_fu_384_p2;
wire   [127:0] sth_V_2_fu_160_p4;
wire   [0:0] this_assign_s_fu_180_p2;
wire   [1:0] tmp_14_fu_198_p1;
wire   [0:0] sel_tmp2_i_fu_225_p2;
wire   [0:0] val_assign_fu_174_p2;
wire   [0:0] sel_tmp3_i_fu_231_p2;
wire   [0:0] tmp_13_fu_186_p3;
wire   [0:0] sel_tmp_i_fu_219_p2;
wire   [0:0] not_sel_tmp3_i_fu_237_p2;
wire   [0:0] tmp2_fu_249_p2;
wire   [0:0] tmp1_fu_255_p2;
wire   [0:0] tmp_fu_243_p2;
wire   [0:0] sel_tmp6_i_fu_266_p2;
wire   [0:0] sel_tmp7_i_fu_272_p2;
wire   [0:0] brmerge_demorgan_i_fu_214_p2;
wire   [0:0] sel_tmp4_i_fu_260_p2;
wire   [0:0] sel_tmp2_i_not_fu_286_p2;
wire   [127:0] p_Result_s_fu_202_p5;
wire   [0:0] state_1_flag_1_i_fu_278_p3;
wire   [0:0] not_sel_tmp7_i_fu_292_p2;
wire   [0:0] p_state_1_new_1_i_fu_323_p2;
wire   [0:0] send_packet_V_fu_298_p2;
wire   [0:0] internal_m_valid_V_fu_338_p2;
wire   [255:0] tmp_15_fu_395_p1;
wire   [127:0] sth_V_fu_304_p3;
reg   [255:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [127:0] ap_return_2_preg;
reg   [0:0] ap_return_3_preg;
reg   [0:0] ap_return_4_preg;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 state_1 = 32'd1;
#0 ap_return_0_preg = 256'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 128'd0;
#0 ap_return_3_preg = 1'd0;
#0 ap_return_4_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 256'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_0_preg <= tmp_15_fu_395_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_1_preg <= {{Queue_buffer_packet_q0[287:256]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 128'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_2_preg <= sth_V_fu_304_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_3_preg <= internal_m_valid_V_fu_338_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_4_preg <= Queue_buffer_packet_q0[32'd416];
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Queue_rd_pos_V_1_lo_reg_452 <= Queue_rd_pos_V_1_i;
        Queue_rd_pos_V_load_reg_462 <= Queue_rd_pos_V_i;
    end
end

always @ (posedge ap_clk) begin
    if (((p_state_1_flag_1_i_fu_318_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        state_1[0] <= p_state_1_new_1_i_cas_fu_328_p1[0];
    end
end

always @ (*) begin
    if (((r_V_fu_344_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        Queue_ap_axis_size_o = Queue_size_assign_i_fu_349_p2;
    end else if (((ap_start == 1'b1) & (reset_V_read_read_fu_64_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        Queue_ap_axis_size_o = 32'd0;
    end else begin
        Queue_ap_axis_size_o = Queue_ap_axis_size_i;
    end
end

always @ (*) begin
    if ((((r_V_fu_344_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b1) & (reset_V_read_read_fu_64_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        Queue_ap_axis_size_o_ap_vld = 1'b1;
    end else begin
        Queue_ap_axis_size_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Queue_buffer_V_ce0 = 1'b1;
    end else begin
        Queue_buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Queue_buffer_packet_ce0 = 1'b1;
    end else begin
        Queue_buffer_packet_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((r_V_fu_344_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        Queue_rd_pos_V_1_o = Queue_rd_pos_V_assi_fu_361_p2;
    end else if (((ap_start == 1'b1) & (reset_V_read_read_fu_64_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        Queue_rd_pos_V_1_o = 4'd0;
    end else begin
        Queue_rd_pos_V_1_o = Queue_rd_pos_V_1_i;
    end
end

always @ (*) begin
    if ((((r_V_fu_344_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b1) & (reset_V_read_read_fu_64_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        Queue_rd_pos_V_1_o_ap_vld = 1'b1;
    end else begin
        Queue_rd_pos_V_1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((dst_port_rd_V_fu_312_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        Queue_rd_pos_V_o = Queue_rd_pos_V_assi_1_fu_384_p2;
    end else if (((ap_start == 1'b1) & (reset_V_read_read_fu_64_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        Queue_rd_pos_V_o = 4'd0;
    end else begin
        Queue_rd_pos_V_o = Queue_rd_pos_V_i;
    end
end

always @ (*) begin
    if ((((dst_port_rd_V_fu_312_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b1) & (reset_V_read_read_fu_64_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        Queue_rd_pos_V_o_ap_vld = 1'b1;
    end else begin
        Queue_rd_pos_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((dst_port_rd_V_fu_312_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        Queue_size_o = Queue_size_assign_i_2_fu_372_p2;
    end else if (((ap_start == 1'b1) & (reset_V_read_read_fu_64_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        Queue_size_o = 32'd0;
    end else begin
        Queue_size_o = Queue_size_i;
    end
end

always @ (*) begin
    if ((((dst_port_rd_V_fu_312_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b1) & (reset_V_read_read_fu_64_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        Queue_size_o_ap_vld = 1'b1;
    end else begin
        Queue_size_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (reset_V_read_read_fu_64_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        Queue_wr_pos_V_1_ap_vld = 1'b1;
    end else begin
        Queue_wr_pos_V_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (reset_V_read_read_fu_64_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        Queue_wr_pos_V_ap_vld = 1'b1;
    end else begin
        Queue_wr_pos_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_0 = tmp_15_fu_395_p1;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_1 = {{Queue_buffer_packet_q0[287:256]}};
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_2 = sth_V_fu_304_p3;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_3 = internal_m_valid_V_fu_338_p2;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return_4 = Queue_buffer_packet_q0[32'd416];
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Queue_buffer_V_address0 = tmp_i2_fu_151_p1;

assign Queue_buffer_packet_address0 = tmp_i_fu_142_p1;

assign Queue_rd_pos_V_assi_1_fu_384_p2 = (Queue_rd_pos_V_load_reg_462 + 4'd1);

assign Queue_rd_pos_V_assi_fu_361_p2 = (Queue_rd_pos_V_1_lo_reg_452 + 4'd1);

assign Queue_size_assign_i_2_fu_372_p2 = ($signed(Queue_size_i) + $signed(32'd4294967295));

assign Queue_size_assign_i_fu_349_p2 = ($signed(Queue_ap_axis_size_i) + $signed(32'd4294967295));

assign Queue_wr_pos_V = 4'd0;

assign Queue_wr_pos_V_1 = 4'd0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign brmerge_demorgan_i_fu_214_p2 = (this_assign_s_fu_180_p2 & m_axis_tready_V);

assign dst_port_rd_V_fu_312_p2 = (sel_tmp7_i_fu_272_p2 & brmerge_demorgan_i_fu_214_p2);

assign internal_m_valid_V_fu_338_p2 = (this_assign_s_fu_180_p2 & send_packet_V_fu_298_p2);

assign not_sel_tmp3_i_fu_237_p2 = (sel_tmp3_i_fu_231_p2 ^ 1'd1);

assign not_sel_tmp7_i_fu_292_p2 = (val_assign_fu_174_p2 | sel_tmp2_i_not_fu_286_p2);

assign p_Result_s_fu_202_p5 = {{sth_V_2_fu_160_p4[127:32]}, {Queue_buffer_V_q0}, {sth_V_2_fu_160_p4[23:0]}};

assign p_state_1_flag_1_i_fu_318_p2 = (state_1_flag_1_i_fu_278_p3 | reset_V);

assign p_state_1_new_1_i_cas_fu_328_p1 = p_state_1_new_1_i_fu_323_p2;

assign p_state_1_new_1_i_fu_323_p2 = (reset_V | not_sel_tmp7_i_fu_292_p2);

assign r_V_fu_344_p2 = (m_axis_tready_V & internal_m_valid_V_fu_338_p2);

assign reset_V_read_read_fu_64_p2 = reset_V;

assign sel_tmp2_i_fu_225_p2 = ((tmp_14_fu_198_p1 == 2'd1) ? 1'b1 : 1'b0);

assign sel_tmp2_i_not_fu_286_p2 = (sel_tmp2_i_fu_225_p2 ^ 1'd1);

assign sel_tmp3_i_fu_231_p2 = (val_assign_fu_174_p2 & sel_tmp2_i_fu_225_p2);

assign sel_tmp4_i_fu_260_p2 = (tmp_fu_243_p2 & tmp1_fu_255_p2);

assign sel_tmp6_i_fu_266_p2 = (val_assign_fu_174_p2 ^ 1'd1);

assign sel_tmp7_i_fu_272_p2 = (sel_tmp6_i_fu_266_p2 & sel_tmp2_i_fu_225_p2);

assign sel_tmp_i_fu_219_p2 = ((tmp_14_fu_198_p1 == 2'd0) ? 1'b1 : 1'b0);

assign send_packet_V_fu_298_p2 = (sel_tmp7_i_fu_272_p2 | not_sel_tmp3_i_fu_237_p2);

assign state_1_flag_1_i_fu_278_p3 = ((sel_tmp7_i_fu_272_p2[0:0] === 1'b1) ? brmerge_demorgan_i_fu_214_p2 : sel_tmp4_i_fu_260_p2);

assign sth_V_2_fu_160_p4 = {{Queue_buffer_packet_q0[415:288]}};

assign sth_V_fu_304_p3 = ((sel_tmp7_i_fu_272_p2[0:0] === 1'b1) ? p_Result_s_fu_202_p5 : sth_V_2_fu_160_p4);

assign this_assign_s_fu_180_p2 = ((Queue_ap_axis_size_i != 32'd0) ? 1'b1 : 1'b0);

assign tmp1_fu_255_p2 = (tmp2_fu_249_p2 & m_axis_tready_V);

assign tmp2_fu_249_p2 = (sel_tmp_i_fu_219_p2 & not_sel_tmp3_i_fu_237_p2);

assign tmp_13_fu_186_p3 = Queue_buffer_packet_q0[32'd416];

assign tmp_14_fu_198_p1 = state_1[1:0];

assign tmp_15_fu_395_p1 = Queue_buffer_packet_q0[255:0];

assign tmp_fu_243_p2 = (tmp_13_fu_186_p3 & this_assign_s_fu_180_p2);

assign tmp_i2_fu_151_p1 = Queue_rd_pos_V_i;

assign tmp_i_fu_142_p1 = Queue_rd_pos_V_1_i;

assign val_assign_fu_174_p2 = ((Queue_size_i == 32'd0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    state_1[31:1] <= 31'b0000000000000000000000000000000;
end

endmodule //Read_r
