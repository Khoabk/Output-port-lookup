// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Read_r_HH_
#define _Read_r_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Read_r : public sc_module {
    // Port declarations 35
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<1> > m_axis_tready_V;
    sc_in< sc_lv<1> > reset_V;
    sc_in< sc_lv<32> > Queue_ap_axis_size_i;
    sc_out< sc_lv<32> > Queue_ap_axis_size_o;
    sc_out< sc_logic > Queue_ap_axis_size_o_ap_vld;
    sc_out< sc_lv<4> > Queue_wr_pos_V_1;
    sc_out< sc_logic > Queue_wr_pos_V_1_ap_vld;
    sc_in< sc_lv<4> > Queue_rd_pos_V_1_i;
    sc_out< sc_lv<4> > Queue_rd_pos_V_1_o;
    sc_out< sc_logic > Queue_rd_pos_V_1_o_ap_vld;
    sc_in< sc_lv<32> > Queue_size_i;
    sc_out< sc_lv<32> > Queue_size_o;
    sc_out< sc_logic > Queue_size_o_ap_vld;
    sc_out< sc_lv<4> > Queue_wr_pos_V;
    sc_out< sc_logic > Queue_wr_pos_V_ap_vld;
    sc_in< sc_lv<4> > Queue_rd_pos_V_i;
    sc_out< sc_lv<4> > Queue_rd_pos_V_o;
    sc_out< sc_logic > Queue_rd_pos_V_o_ap_vld;
    sc_out< sc_lv<4> > Queue_buffer_packet_address0;
    sc_out< sc_logic > Queue_buffer_packet_ce0;
    sc_in< sc_lv<417> > Queue_buffer_packet_q0;
    sc_out< sc_lv<4> > Queue_buffer_V_address0;
    sc_out< sc_logic > Queue_buffer_V_ce0;
    sc_in< sc_lv<8> > Queue_buffer_V_q0;
    sc_out< sc_lv<256> > ap_return_0;
    sc_out< sc_lv<32> > ap_return_1;
    sc_out< sc_lv<128> > ap_return_2;
    sc_out< sc_lv<1> > ap_return_3;
    sc_out< sc_lv<1> > ap_return_4;


    // Module declarations
    Read_r(sc_module_name name);
    SC_HAS_PROCESS(Read_r);

    ~Read_r();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > state_1;
    sc_signal< sc_lv<1> > reset_V_read_read_fu_64_p2;
    sc_signal< sc_lv<4> > Queue_rd_pos_V_1_lo_reg_452;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<4> > Queue_rd_pos_V_load_reg_462;
    sc_signal< sc_lv<64> > tmp_i_fu_142_p1;
    sc_signal< sc_lv<64> > tmp_i2_fu_151_p1;
    sc_signal< sc_lv<32> > p_state_1_new_1_i_cas_fu_328_p1;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > p_state_1_flag_1_i_fu_318_p2;
    sc_signal< sc_lv<32> > Queue_size_assign_i_fu_349_p2;
    sc_signal< sc_lv<1> > r_V_fu_344_p2;
    sc_signal< sc_lv<4> > Queue_rd_pos_V_assi_fu_361_p2;
    sc_signal< sc_lv<32> > Queue_size_assign_i_2_fu_372_p2;
    sc_signal< sc_lv<1> > dst_port_rd_V_fu_312_p2;
    sc_signal< sc_lv<4> > Queue_rd_pos_V_assi_1_fu_384_p2;
    sc_signal< sc_lv<128> > sth_V_2_fu_160_p4;
    sc_signal< sc_lv<1> > this_assign_s_fu_180_p2;
    sc_signal< sc_lv<2> > tmp_14_fu_198_p1;
    sc_signal< sc_lv<1> > sel_tmp2_i_fu_225_p2;
    sc_signal< sc_lv<1> > val_assign_fu_174_p2;
    sc_signal< sc_lv<1> > sel_tmp3_i_fu_231_p2;
    sc_signal< sc_lv<1> > tmp_13_fu_186_p3;
    sc_signal< sc_lv<1> > sel_tmp_i_fu_219_p2;
    sc_signal< sc_lv<1> > not_sel_tmp3_i_fu_237_p2;
    sc_signal< sc_lv<1> > tmp2_fu_249_p2;
    sc_signal< sc_lv<1> > tmp1_fu_255_p2;
    sc_signal< sc_lv<1> > tmp_fu_243_p2;
    sc_signal< sc_lv<1> > sel_tmp6_i_fu_266_p2;
    sc_signal< sc_lv<1> > sel_tmp7_i_fu_272_p2;
    sc_signal< sc_lv<1> > brmerge_demorgan_i_fu_214_p2;
    sc_signal< sc_lv<1> > sel_tmp4_i_fu_260_p2;
    sc_signal< sc_lv<1> > sel_tmp2_i_not_fu_286_p2;
    sc_signal< sc_lv<128> > p_Result_s_fu_202_p5;
    sc_signal< sc_lv<1> > state_1_flag_1_i_fu_278_p3;
    sc_signal< sc_lv<1> > not_sel_tmp7_i_fu_292_p2;
    sc_signal< sc_lv<1> > p_state_1_new_1_i_fu_323_p2;
    sc_signal< sc_lv<1> > send_packet_V_fu_298_p2;
    sc_signal< sc_lv<1> > internal_m_valid_V_fu_338_p2;
    sc_signal< sc_lv<256> > tmp_15_fu_395_p1;
    sc_signal< sc_lv<128> > sth_V_fu_304_p3;
    sc_signal< sc_lv<256> > ap_return_0_preg;
    sc_signal< sc_lv<32> > ap_return_1_preg;
    sc_signal< sc_lv<128> > ap_return_2_preg;
    sc_signal< sc_lv<1> > ap_return_3_preg;
    sc_signal< sc_lv<1> > ap_return_4_preg;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_120;
    static const sc_lv<32> ap_const_lv32_19F;
    static const sc_lv<32> ap_const_lv32_1A0;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_100;
    static const sc_lv<32> ap_const_lv32_11F;
    static const sc_lv<256> ap_const_lv256_lc_1;
    static const sc_lv<128> ap_const_lv128_lc_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_Queue_ap_axis_size_o();
    void thread_Queue_ap_axis_size_o_ap_vld();
    void thread_Queue_buffer_V_address0();
    void thread_Queue_buffer_V_ce0();
    void thread_Queue_buffer_packet_address0();
    void thread_Queue_buffer_packet_ce0();
    void thread_Queue_rd_pos_V_1_o();
    void thread_Queue_rd_pos_V_1_o_ap_vld();
    void thread_Queue_rd_pos_V_assi_1_fu_384_p2();
    void thread_Queue_rd_pos_V_assi_fu_361_p2();
    void thread_Queue_rd_pos_V_o();
    void thread_Queue_rd_pos_V_o_ap_vld();
    void thread_Queue_size_assign_i_2_fu_372_p2();
    void thread_Queue_size_assign_i_fu_349_p2();
    void thread_Queue_size_o();
    void thread_Queue_size_o_ap_vld();
    void thread_Queue_wr_pos_V();
    void thread_Queue_wr_pos_V_1();
    void thread_Queue_wr_pos_V_1_ap_vld();
    void thread_Queue_wr_pos_V_ap_vld();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_ap_return_4();
    void thread_brmerge_demorgan_i_fu_214_p2();
    void thread_dst_port_rd_V_fu_312_p2();
    void thread_internal_m_valid_V_fu_338_p2();
    void thread_not_sel_tmp3_i_fu_237_p2();
    void thread_not_sel_tmp7_i_fu_292_p2();
    void thread_p_Result_s_fu_202_p5();
    void thread_p_state_1_flag_1_i_fu_318_p2();
    void thread_p_state_1_new_1_i_cas_fu_328_p1();
    void thread_p_state_1_new_1_i_fu_323_p2();
    void thread_r_V_fu_344_p2();
    void thread_reset_V_read_read_fu_64_p2();
    void thread_sel_tmp2_i_fu_225_p2();
    void thread_sel_tmp2_i_not_fu_286_p2();
    void thread_sel_tmp3_i_fu_231_p2();
    void thread_sel_tmp4_i_fu_260_p2();
    void thread_sel_tmp6_i_fu_266_p2();
    void thread_sel_tmp7_i_fu_272_p2();
    void thread_sel_tmp_i_fu_219_p2();
    void thread_send_packet_V_fu_298_p2();
    void thread_state_1_flag_1_i_fu_278_p3();
    void thread_sth_V_2_fu_160_p4();
    void thread_sth_V_fu_304_p3();
    void thread_this_assign_s_fu_180_p2();
    void thread_tmp1_fu_255_p2();
    void thread_tmp2_fu_249_p2();
    void thread_tmp_13_fu_186_p3();
    void thread_tmp_14_fu_198_p1();
    void thread_tmp_15_fu_395_p1();
    void thread_tmp_fu_243_p2();
    void thread_tmp_i2_fu_151_p1();
    void thread_tmp_i_fu_142_p1();
    void thread_val_assign_fu_174_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
