// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "switch_output_port_lookup.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic switch_output_port_lookup::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic switch_output_port_lookup::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> switch_output_port_lookup::ap_ST_fsm_state1 = "1";
const sc_lv<5> switch_output_port_lookup::ap_ST_fsm_state2 = "10";
const sc_lv<5> switch_output_port_lookup::ap_ST_fsm_state3 = "100";
const sc_lv<5> switch_output_port_lookup::ap_ST_fsm_state4 = "1000";
const sc_lv<5> switch_output_port_lookup::ap_ST_fsm_state5 = "10000";
const sc_lv<32> switch_output_port_lookup::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<4> switch_output_port_lookup::ap_const_lv4_0 = "0000";
const sc_lv<32> switch_output_port_lookup::ap_const_lv32_1 = "1";
const sc_lv<32> switch_output_port_lookup::ap_const_lv32_3 = "11";
const sc_lv<32> switch_output_port_lookup::ap_const_lv32_4 = "100";
const sc_lv<1> switch_output_port_lookup::ap_const_lv1_1 = "1";
const sc_lv<32> switch_output_port_lookup::ap_const_lv32_2 = "10";
const sc_lv<1> switch_output_port_lookup::ap_const_lv1_0 = "0";
const sc_lv<32> switch_output_port_lookup::ap_const_lv32_1F = "11111";
const sc_lv<29> switch_output_port_lookup::ap_const_lv29_1 = "1";
const sc_lv<4> switch_output_port_lookup::ap_const_lv4_1 = "1";
const bool switch_output_port_lookup::ap_const_boolean_1 = true;

switch_output_port_lookup::switch_output_port_lookup(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Queue_buffer_packet_U = new switch_output_porbkb("Queue_buffer_packet_U");
    Queue_buffer_packet_U->clk(ap_clk);
    Queue_buffer_packet_U->reset(ap_rst);
    Queue_buffer_packet_U->address0(Queue_buffer_packet_address0);
    Queue_buffer_packet_U->ce0(Queue_buffer_packet_ce0);
    Queue_buffer_packet_U->we0(Queue_buffer_packet_we0);
    Queue_buffer_packet_U->d0(Queue_buffer_packet_d0);
    Queue_buffer_packet_U->q0(Queue_buffer_packet_q0);
    Queue_buffer_V_U = new switch_output_porcud("Queue_buffer_V_U");
    Queue_buffer_V_U->clk(ap_clk);
    Queue_buffer_V_U->reset(ap_rst);
    Queue_buffer_V_U->address0(Queue_buffer_V_address0);
    Queue_buffer_V_U->ce0(Queue_buffer_V_ce0);
    Queue_buffer_V_U->we0(Queue_buffer_V_we0);
    Queue_buffer_V_U->d0(dst_port_V_reg_639);
    Queue_buffer_V_U->q0(Queue_buffer_V_q0);
    lut_ret_i_i_lut_fu_278 = new lut("lut_ret_i_i_lut_fu_278");
    lut_ret_i_i_lut_fu_278->ap_clk(ap_clk);
    lut_ret_i_i_lut_fu_278->ap_rst(ap_rst);
    lut_ret_i_i_lut_fu_278->ap_start(lut_ret_i_i_lut_fu_278_ap_start);
    lut_ret_i_i_lut_fu_278->ap_done(lut_ret_i_i_lut_fu_278_ap_done);
    lut_ret_i_i_lut_fu_278->ap_idle(lut_ret_i_i_lut_fu_278_ap_idle);
    lut_ret_i_i_lut_fu_278->ap_ready(lut_ret_i_i_lut_fu_278_ap_ready);
    lut_ret_i_i_lut_fu_278->dst_mac_V(eth_ret_i_i_eth_fu_377_ap_return_0);
    lut_ret_i_i_lut_fu_278->src_mac_V(eth_ret_i_i_eth_fu_377_ap_return_1);
    lut_ret_i_i_lut_fu_278->src_port_V(eth_ret_i_i_eth_fu_377_ap_return_2);
    lut_ret_i_i_lut_fu_278->lookup_req_V(eth_ret_i_i_eth_fu_377_ap_return_3);
    lut_ret_i_i_lut_fu_278->reset_V(this_assign_2_reg_624);
    lut_ret_i_i_lut_fu_278->ap_return_0(lut_ret_i_i_lut_fu_278_ap_return_0);
    lut_ret_i_i_lut_fu_278->ap_return_1(lut_ret_i_i_lut_fu_278_ap_return_1);
    grp_Read_r_fu_353 = new Read_r("grp_Read_r_fu_353");
    grp_Read_r_fu_353->ap_clk(ap_clk);
    grp_Read_r_fu_353->ap_rst(ap_rst);
    grp_Read_r_fu_353->ap_start(grp_Read_r_fu_353_ap_start);
    grp_Read_r_fu_353->ap_done(grp_Read_r_fu_353_ap_done);
    grp_Read_r_fu_353->ap_idle(grp_Read_r_fu_353_ap_idle);
    grp_Read_r_fu_353->ap_ready(grp_Read_r_fu_353_ap_ready);
    grp_Read_r_fu_353->m_axis_tready_V(m_axis_tready_V);
    grp_Read_r_fu_353->reset_V(this_assign_2_reg_624);
    grp_Read_r_fu_353->Queue_ap_axis_size_i(Queue_ap_axis_size);
    grp_Read_r_fu_353->Queue_ap_axis_size_o(grp_Read_r_fu_353_Queue_ap_axis_size_o);
    grp_Read_r_fu_353->Queue_ap_axis_size_o_ap_vld(grp_Read_r_fu_353_Queue_ap_axis_size_o_ap_vld);
    grp_Read_r_fu_353->Queue_wr_pos_V_1(grp_Read_r_fu_353_Queue_wr_pos_V_1);
    grp_Read_r_fu_353->Queue_wr_pos_V_1_ap_vld(grp_Read_r_fu_353_Queue_wr_pos_V_1_ap_vld);
    grp_Read_r_fu_353->Queue_rd_pos_V_1_i(Queue_rd_pos_V_1);
    grp_Read_r_fu_353->Queue_rd_pos_V_1_o(grp_Read_r_fu_353_Queue_rd_pos_V_1_o);
    grp_Read_r_fu_353->Queue_rd_pos_V_1_o_ap_vld(grp_Read_r_fu_353_Queue_rd_pos_V_1_o_ap_vld);
    grp_Read_r_fu_353->Queue_size_i(Queue_size);
    grp_Read_r_fu_353->Queue_size_o(grp_Read_r_fu_353_Queue_size_o);
    grp_Read_r_fu_353->Queue_size_o_ap_vld(grp_Read_r_fu_353_Queue_size_o_ap_vld);
    grp_Read_r_fu_353->Queue_wr_pos_V(grp_Read_r_fu_353_Queue_wr_pos_V);
    grp_Read_r_fu_353->Queue_wr_pos_V_ap_vld(grp_Read_r_fu_353_Queue_wr_pos_V_ap_vld);
    grp_Read_r_fu_353->Queue_rd_pos_V_i(Queue_rd_pos_V);
    grp_Read_r_fu_353->Queue_rd_pos_V_o(grp_Read_r_fu_353_Queue_rd_pos_V_o);
    grp_Read_r_fu_353->Queue_rd_pos_V_o_ap_vld(grp_Read_r_fu_353_Queue_rd_pos_V_o_ap_vld);
    grp_Read_r_fu_353->Queue_buffer_packet_address0(grp_Read_r_fu_353_Queue_buffer_packet_address0);
    grp_Read_r_fu_353->Queue_buffer_packet_ce0(grp_Read_r_fu_353_Queue_buffer_packet_ce0);
    grp_Read_r_fu_353->Queue_buffer_packet_q0(Queue_buffer_packet_q0);
    grp_Read_r_fu_353->Queue_buffer_V_address0(grp_Read_r_fu_353_Queue_buffer_V_address0);
    grp_Read_r_fu_353->Queue_buffer_V_ce0(grp_Read_r_fu_353_Queue_buffer_V_ce0);
    grp_Read_r_fu_353->Queue_buffer_V_q0(Queue_buffer_V_q0);
    grp_Read_r_fu_353->ap_return_0(grp_Read_r_fu_353_ap_return_0);
    grp_Read_r_fu_353->ap_return_1(grp_Read_r_fu_353_ap_return_1);
    grp_Read_r_fu_353->ap_return_2(grp_Read_r_fu_353_ap_return_2);
    grp_Read_r_fu_353->ap_return_3(grp_Read_r_fu_353_ap_return_3);
    grp_Read_r_fu_353->ap_return_4(grp_Read_r_fu_353_ap_return_4);
    eth_ret_i_i_eth_fu_377 = new eth("eth_ret_i_i_eth_fu_377");
    eth_ret_i_i_eth_fu_377->ap_clk(ap_clk);
    eth_ret_i_i_eth_fu_377->ap_rst(ap_rst);
    eth_ret_i_i_eth_fu_377->ap_start(eth_ret_i_i_eth_fu_377_ap_start);
    eth_ret_i_i_eth_fu_377->ap_done(eth_ret_i_i_eth_fu_377_ap_done);
    eth_ret_i_i_eth_fu_377->ap_idle(eth_ret_i_i_eth_fu_377_ap_idle);
    eth_ret_i_i_eth_fu_377->ap_ready(eth_ret_i_i_eth_fu_377_ap_ready);
    eth_ret_i_i_eth_fu_377->tdata_V(s_axis_tdata_V);
    eth_ret_i_i_eth_fu_377->tuser_V(s_axis_tuser_V);
    eth_ret_i_i_eth_fu_377->valid_V(eth_ret_i_i_eth_fu_377_valid_V);
    eth_ret_i_i_eth_fu_377->tlast_V(s_axis_tlast_V);
    eth_ret_i_i_eth_fu_377->reset_V(this_assign_2_reg_624);
    eth_ret_i_i_eth_fu_377->ap_return_0(eth_ret_i_i_eth_fu_377_ap_return_0);
    eth_ret_i_i_eth_fu_377->ap_return_1(eth_ret_i_i_eth_fu_377_ap_return_1);
    eth_ret_i_i_eth_fu_377->ap_return_2(eth_ret_i_i_eth_fu_377_ap_return_2);
    eth_ret_i_i_eth_fu_377->ap_return_3(eth_ret_i_i_eth_fu_377_ap_return_3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Queue_buffer_V_address0);
    sensitive << ( grp_Read_r_fu_353_Queue_buffer_V_address0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_i3_i_fu_558_p1 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_Queue_buffer_V_ce0);
    sensitive << ( grp_Read_r_fu_353_Queue_buffer_V_ce0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_Queue_buffer_V_we0);
    sensitive << ( lookup_done_V_reg_644 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_Queue_buffer_packet_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_Read_r_fu_353_Queue_buffer_packet_address0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_i_i_fu_493_p1 );

    SC_METHOD(thread_Queue_buffer_packet_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_Read_r_fu_353_Queue_buffer_packet_ce0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_Queue_buffer_packet_d0);
    sensitive << ( s_axis_tdata_V );
    sensitive << ( s_axis_tkeep_V );
    sensitive << ( s_axis_tuser_V );
    sensitive << ( s_axis_tlast_V );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_Queue_buffer_packet_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( r_V_fu_450_p2 );

    SC_METHOD(thread_Queue_size_assign_i_1_fu_530_p2);
    sensitive << ( Queue_size );

    SC_METHOD(thread_Queue_size_assign_i_fu_465_p2);
    sensitive << ( Queue_ap_axis_size );

    SC_METHOD(thread_Queue_wr_pos_V_assi_1_fu_546_p2);
    sensitive << ( Queue_wr_pos_V );

    SC_METHOD(thread_Queue_wr_pos_V_assi_fu_481_p2);
    sensitive << ( Queue_wr_pos_V_1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( grp_Read_r_fu_353_ap_done );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_Read_r_fu_353_ap_done );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_eth_ret_i_i_eth_fu_377_ap_start);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_eth_ret_i_i_eth_fu_377_valid_V);
    sensitive << ( s_axis_tvalid_V );
    sensitive << ( rhs_V_fu_444_p2 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_grp_Read_r_fu_353_ap_start);
    sensitive << ( grp_Read_r_fu_353_ap_start_reg );

    SC_METHOD(thread_lut_ret_i_i_lut_fu_278_ap_start);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_m_axis_tdata_V);
    sensitive << ( grp_Read_r_fu_353_ap_done );
    sensitive << ( grp_Read_r_fu_353_ap_return_0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_m_axis_tkeep_V);
    sensitive << ( grp_Read_r_fu_353_ap_done );
    sensitive << ( grp_Read_r_fu_353_ap_return_1 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_m_axis_tlast_V);
    sensitive << ( grp_Read_r_fu_353_ap_done );
    sensitive << ( grp_Read_r_fu_353_ap_return_4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_m_axis_tuser_V);
    sensitive << ( grp_Read_r_fu_353_ap_done );
    sensitive << ( grp_Read_r_fu_353_ap_return_2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_m_axis_tvalid_V);
    sensitive << ( grp_Read_r_fu_353_ap_done );
    sensitive << ( grp_Read_r_fu_353_ap_return_3 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_r_V_fu_450_p2);
    sensitive << ( s_axis_tvalid_V );
    sensitive << ( rhs_V_fu_444_p2 );

    SC_METHOD(thread_reset_V_read_read_fu_168_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( reset_V );

    SC_METHOD(thread_rhs_V_fu_444_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_434_p4 );

    SC_METHOD(thread_s_axis_tready_V);
    sensitive << ( rhs_V_reg_631 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( s_axis_tready_V_preg );

    SC_METHOD(thread_this_assign_2_fu_388_p2);
    sensitive << ( reset_V );

    SC_METHOD(thread_tmp_fu_434_p4);
    sensitive << ( Queue_ap_axis_size );

    SC_METHOD(thread_tmp_i3_i_fu_558_p1);
    sensitive << ( Queue_wr_pos_V );

    SC_METHOD(thread_tmp_i_i_fu_493_p1);
    sensitive << ( Queue_wr_pos_V_1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_Read_r_fu_353_ap_done );
    sensitive << ( ap_CS_fsm_state5 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00001";
    Queue_ap_axis_size = "00000000000000000000000000000000";
    Queue_wr_pos_V_1 = "0000";
    Queue_rd_pos_V_1 = "0000";
    Queue_size = "00000000000000000000000000000000";
    Queue_wr_pos_V = "0000";
    Queue_rd_pos_V = "0000";
    grp_Read_r_fu_353_ap_start_reg = SC_LOGIC_0;
    s_axis_tready_V_preg = "0";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "switch_output_port_lookup_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, s_axis_tdata_V, "(port)s_axis_tdata_V");
    sc_trace(mVcdFile, s_axis_tkeep_V, "(port)s_axis_tkeep_V");
    sc_trace(mVcdFile, s_axis_tuser_V, "(port)s_axis_tuser_V");
    sc_trace(mVcdFile, s_axis_tvalid_V, "(port)s_axis_tvalid_V");
    sc_trace(mVcdFile, s_axis_tready_V, "(port)s_axis_tready_V");
    sc_trace(mVcdFile, s_axis_tlast_V, "(port)s_axis_tlast_V");
    sc_trace(mVcdFile, m_axis_tdata_V, "(port)m_axis_tdata_V");
    sc_trace(mVcdFile, m_axis_tkeep_V, "(port)m_axis_tkeep_V");
    sc_trace(mVcdFile, m_axis_tuser_V, "(port)m_axis_tuser_V");
    sc_trace(mVcdFile, m_axis_tvalid_V, "(port)m_axis_tvalid_V");
    sc_trace(mVcdFile, m_axis_tready_V, "(port)m_axis_tready_V");
    sc_trace(mVcdFile, m_axis_tlast_V, "(port)m_axis_tlast_V");
    sc_trace(mVcdFile, reset_V, "(port)reset_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, Queue_ap_axis_size, "Queue_ap_axis_size");
    sc_trace(mVcdFile, Queue_wr_pos_V_1, "Queue_wr_pos_V_1");
    sc_trace(mVcdFile, Queue_rd_pos_V_1, "Queue_rd_pos_V_1");
    sc_trace(mVcdFile, Queue_size, "Queue_size");
    sc_trace(mVcdFile, Queue_wr_pos_V, "Queue_wr_pos_V");
    sc_trace(mVcdFile, Queue_rd_pos_V, "Queue_rd_pos_V");
    sc_trace(mVcdFile, Queue_buffer_packet_address0, "Queue_buffer_packet_address0");
    sc_trace(mVcdFile, Queue_buffer_packet_ce0, "Queue_buffer_packet_ce0");
    sc_trace(mVcdFile, Queue_buffer_packet_we0, "Queue_buffer_packet_we0");
    sc_trace(mVcdFile, Queue_buffer_packet_d0, "Queue_buffer_packet_d0");
    sc_trace(mVcdFile, Queue_buffer_packet_q0, "Queue_buffer_packet_q0");
    sc_trace(mVcdFile, Queue_buffer_V_address0, "Queue_buffer_V_address0");
    sc_trace(mVcdFile, Queue_buffer_V_ce0, "Queue_buffer_V_ce0");
    sc_trace(mVcdFile, Queue_buffer_V_we0, "Queue_buffer_V_we0");
    sc_trace(mVcdFile, Queue_buffer_V_q0, "Queue_buffer_V_q0");
    sc_trace(mVcdFile, this_assign_2_fu_388_p2, "this_assign_2_fu_388_p2");
    sc_trace(mVcdFile, this_assign_2_reg_624, "this_assign_2_reg_624");
    sc_trace(mVcdFile, rhs_V_fu_444_p2, "rhs_V_fu_444_p2");
    sc_trace(mVcdFile, rhs_V_reg_631, "rhs_V_reg_631");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, dst_port_V_reg_639, "dst_port_V_reg_639");
    sc_trace(mVcdFile, lookup_done_V_reg_644, "lookup_done_V_reg_644");
    sc_trace(mVcdFile, lut_ret_i_i_lut_fu_278_ap_start, "lut_ret_i_i_lut_fu_278_ap_start");
    sc_trace(mVcdFile, lut_ret_i_i_lut_fu_278_ap_done, "lut_ret_i_i_lut_fu_278_ap_done");
    sc_trace(mVcdFile, lut_ret_i_i_lut_fu_278_ap_idle, "lut_ret_i_i_lut_fu_278_ap_idle");
    sc_trace(mVcdFile, lut_ret_i_i_lut_fu_278_ap_ready, "lut_ret_i_i_lut_fu_278_ap_ready");
    sc_trace(mVcdFile, lut_ret_i_i_lut_fu_278_ap_return_0, "lut_ret_i_i_lut_fu_278_ap_return_0");
    sc_trace(mVcdFile, lut_ret_i_i_lut_fu_278_ap_return_1, "lut_ret_i_i_lut_fu_278_ap_return_1");
    sc_trace(mVcdFile, grp_Read_r_fu_353_ap_start, "grp_Read_r_fu_353_ap_start");
    sc_trace(mVcdFile, grp_Read_r_fu_353_ap_done, "grp_Read_r_fu_353_ap_done");
    sc_trace(mVcdFile, grp_Read_r_fu_353_ap_idle, "grp_Read_r_fu_353_ap_idle");
    sc_trace(mVcdFile, grp_Read_r_fu_353_ap_ready, "grp_Read_r_fu_353_ap_ready");
    sc_trace(mVcdFile, grp_Read_r_fu_353_Queue_ap_axis_size_o, "grp_Read_r_fu_353_Queue_ap_axis_size_o");
    sc_trace(mVcdFile, grp_Read_r_fu_353_Queue_ap_axis_size_o_ap_vld, "grp_Read_r_fu_353_Queue_ap_axis_size_o_ap_vld");
    sc_trace(mVcdFile, grp_Read_r_fu_353_Queue_wr_pos_V_1, "grp_Read_r_fu_353_Queue_wr_pos_V_1");
    sc_trace(mVcdFile, grp_Read_r_fu_353_Queue_wr_pos_V_1_ap_vld, "grp_Read_r_fu_353_Queue_wr_pos_V_1_ap_vld");
    sc_trace(mVcdFile, grp_Read_r_fu_353_Queue_rd_pos_V_1_o, "grp_Read_r_fu_353_Queue_rd_pos_V_1_o");
    sc_trace(mVcdFile, grp_Read_r_fu_353_Queue_rd_pos_V_1_o_ap_vld, "grp_Read_r_fu_353_Queue_rd_pos_V_1_o_ap_vld");
    sc_trace(mVcdFile, grp_Read_r_fu_353_Queue_size_o, "grp_Read_r_fu_353_Queue_size_o");
    sc_trace(mVcdFile, grp_Read_r_fu_353_Queue_size_o_ap_vld, "grp_Read_r_fu_353_Queue_size_o_ap_vld");
    sc_trace(mVcdFile, grp_Read_r_fu_353_Queue_wr_pos_V, "grp_Read_r_fu_353_Queue_wr_pos_V");
    sc_trace(mVcdFile, grp_Read_r_fu_353_Queue_wr_pos_V_ap_vld, "grp_Read_r_fu_353_Queue_wr_pos_V_ap_vld");
    sc_trace(mVcdFile, grp_Read_r_fu_353_Queue_rd_pos_V_o, "grp_Read_r_fu_353_Queue_rd_pos_V_o");
    sc_trace(mVcdFile, grp_Read_r_fu_353_Queue_rd_pos_V_o_ap_vld, "grp_Read_r_fu_353_Queue_rd_pos_V_o_ap_vld");
    sc_trace(mVcdFile, grp_Read_r_fu_353_Queue_buffer_packet_address0, "grp_Read_r_fu_353_Queue_buffer_packet_address0");
    sc_trace(mVcdFile, grp_Read_r_fu_353_Queue_buffer_packet_ce0, "grp_Read_r_fu_353_Queue_buffer_packet_ce0");
    sc_trace(mVcdFile, grp_Read_r_fu_353_Queue_buffer_V_address0, "grp_Read_r_fu_353_Queue_buffer_V_address0");
    sc_trace(mVcdFile, grp_Read_r_fu_353_Queue_buffer_V_ce0, "grp_Read_r_fu_353_Queue_buffer_V_ce0");
    sc_trace(mVcdFile, grp_Read_r_fu_353_ap_return_0, "grp_Read_r_fu_353_ap_return_0");
    sc_trace(mVcdFile, grp_Read_r_fu_353_ap_return_1, "grp_Read_r_fu_353_ap_return_1");
    sc_trace(mVcdFile, grp_Read_r_fu_353_ap_return_2, "grp_Read_r_fu_353_ap_return_2");
    sc_trace(mVcdFile, grp_Read_r_fu_353_ap_return_3, "grp_Read_r_fu_353_ap_return_3");
    sc_trace(mVcdFile, grp_Read_r_fu_353_ap_return_4, "grp_Read_r_fu_353_ap_return_4");
    sc_trace(mVcdFile, eth_ret_i_i_eth_fu_377_ap_start, "eth_ret_i_i_eth_fu_377_ap_start");
    sc_trace(mVcdFile, eth_ret_i_i_eth_fu_377_ap_done, "eth_ret_i_i_eth_fu_377_ap_done");
    sc_trace(mVcdFile, eth_ret_i_i_eth_fu_377_ap_idle, "eth_ret_i_i_eth_fu_377_ap_idle");
    sc_trace(mVcdFile, eth_ret_i_i_eth_fu_377_ap_ready, "eth_ret_i_i_eth_fu_377_ap_ready");
    sc_trace(mVcdFile, eth_ret_i_i_eth_fu_377_valid_V, "eth_ret_i_i_eth_fu_377_valid_V");
    sc_trace(mVcdFile, eth_ret_i_i_eth_fu_377_ap_return_0, "eth_ret_i_i_eth_fu_377_ap_return_0");
    sc_trace(mVcdFile, eth_ret_i_i_eth_fu_377_ap_return_1, "eth_ret_i_i_eth_fu_377_ap_return_1");
    sc_trace(mVcdFile, eth_ret_i_i_eth_fu_377_ap_return_2, "eth_ret_i_i_eth_fu_377_ap_return_2");
    sc_trace(mVcdFile, eth_ret_i_i_eth_fu_377_ap_return_3, "eth_ret_i_i_eth_fu_377_ap_return_3");
    sc_trace(mVcdFile, grp_Read_r_fu_353_ap_start_reg, "grp_Read_r_fu_353_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, r_V_fu_450_p2, "r_V_fu_450_p2");
    sc_trace(mVcdFile, tmp_i_i_fu_493_p1, "tmp_i_i_fu_493_p1");
    sc_trace(mVcdFile, tmp_i3_i_fu_558_p1, "tmp_i3_i_fu_558_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, reset_V_read_read_fu_168_p2, "reset_V_read_read_fu_168_p2");
    sc_trace(mVcdFile, Queue_size_assign_i_fu_465_p2, "Queue_size_assign_i_fu_465_p2");
    sc_trace(mVcdFile, Queue_wr_pos_V_assi_fu_481_p2, "Queue_wr_pos_V_assi_fu_481_p2");
    sc_trace(mVcdFile, Queue_size_assign_i_1_fu_530_p2, "Queue_size_assign_i_1_fu_530_p2");
    sc_trace(mVcdFile, Queue_wr_pos_V_assi_1_fu_546_p2, "Queue_wr_pos_V_assi_1_fu_546_p2");
    sc_trace(mVcdFile, s_axis_tready_V_preg, "s_axis_tready_V_preg");
    sc_trace(mVcdFile, tmp_fu_434_p4, "tmp_fu_434_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("switch_output_port_lookup.hdltvin.dat");
    mHdltvoutHandle.open("switch_output_port_lookup.hdltvout.dat");
}

switch_output_port_lookup::~switch_output_port_lookup() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete Queue_buffer_packet_U;
    delete Queue_buffer_V_U;
    delete lut_ret_i_i_lut_fu_278;
    delete grp_Read_r_fu_353;
    delete eth_ret_i_i_eth_fu_377;
}

void switch_output_port_lookup::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(r_V_fu_450_p2.read(), ap_const_lv1_1))) {
        Queue_ap_axis_size = Queue_size_assign_i_fu_465_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(reset_V_read_read_fu_168_p2.read(), ap_const_lv1_0))) {
        Queue_ap_axis_size = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_Read_r_fu_353_Queue_ap_axis_size_o_ap_vld.read()))) {
        Queue_ap_axis_size = grp_Read_r_fu_353_Queue_ap_axis_size_o.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(reset_V_read_read_fu_168_p2.read(), ap_const_lv1_0))) {
        Queue_rd_pos_V = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_Read_r_fu_353_Queue_rd_pos_V_o_ap_vld.read()))) {
        Queue_rd_pos_V = grp_Read_r_fu_353_Queue_rd_pos_V_o.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(reset_V_read_read_fu_168_p2.read(), ap_const_lv1_0))) {
        Queue_rd_pos_V_1 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_Read_r_fu_353_Queue_rd_pos_V_1_o_ap_vld.read()))) {
        Queue_rd_pos_V_1 = grp_Read_r_fu_353_Queue_rd_pos_V_1_o.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(lookup_done_V_reg_644.read(), ap_const_lv1_1))) {
        Queue_size = Queue_size_assign_i_1_fu_530_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(reset_V_read_read_fu_168_p2.read(), ap_const_lv1_0))) {
        Queue_size = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_Read_r_fu_353_Queue_size_o_ap_vld.read()))) {
        Queue_size = grp_Read_r_fu_353_Queue_size_o.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(lookup_done_V_reg_644.read(), ap_const_lv1_1))) {
        Queue_wr_pos_V = Queue_wr_pos_V_assi_1_fu_546_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(reset_V_read_read_fu_168_p2.read(), ap_const_lv1_0))) {
        Queue_wr_pos_V = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_Read_r_fu_353_Queue_wr_pos_V_ap_vld.read()))) {
        Queue_wr_pos_V = grp_Read_r_fu_353_Queue_wr_pos_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(r_V_fu_450_p2.read(), ap_const_lv1_1))) {
        Queue_wr_pos_V_1 = Queue_wr_pos_V_assi_fu_481_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(reset_V_read_read_fu_168_p2.read(), ap_const_lv1_0))) {
        Queue_wr_pos_V_1 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_Read_r_fu_353_Queue_wr_pos_V_1_ap_vld.read()))) {
        Queue_wr_pos_V_1 = grp_Read_r_fu_353_Queue_wr_pos_V_1.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_Read_r_fu_353_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            grp_Read_r_fu_353_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_Read_r_fu_353_ap_ready.read())) {
            grp_Read_r_fu_353_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        s_axis_tready_V_preg = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            s_axis_tready_V_preg = rhs_V_reg_631.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        dst_port_V_reg_639 = lut_ret_i_i_lut_fu_278_ap_return_0.read();
        lookup_done_V_reg_644 = lut_ret_i_i_lut_fu_278_ap_return_1.read();
        rhs_V_reg_631 = rhs_V_fu_444_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        this_assign_2_reg_624 = this_assign_2_fu_388_p2.read();
    }
}

void switch_output_port_lookup::thread_Queue_buffer_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        Queue_buffer_V_address0 =  (sc_lv<4>) (tmp_i3_i_fu_558_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        Queue_buffer_V_address0 = grp_Read_r_fu_353_Queue_buffer_V_address0.read();
    } else {
        Queue_buffer_V_address0 = "XXXX";
    }
}

void switch_output_port_lookup::thread_Queue_buffer_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        Queue_buffer_V_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        Queue_buffer_V_ce0 = grp_Read_r_fu_353_Queue_buffer_V_ce0.read();
    } else {
        Queue_buffer_V_ce0 = ap_const_logic_0;
    }
}

void switch_output_port_lookup::thread_Queue_buffer_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(lookup_done_V_reg_644.read(), ap_const_lv1_1))) {
        Queue_buffer_V_we0 = ap_const_logic_1;
    } else {
        Queue_buffer_V_we0 = ap_const_logic_0;
    }
}

void switch_output_port_lookup::thread_Queue_buffer_packet_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Queue_buffer_packet_address0 =  (sc_lv<4>) (tmp_i_i_fu_493_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        Queue_buffer_packet_address0 = grp_Read_r_fu_353_Queue_buffer_packet_address0.read();
    } else {
        Queue_buffer_packet_address0 = "XXXX";
    }
}

void switch_output_port_lookup::thread_Queue_buffer_packet_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Queue_buffer_packet_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        Queue_buffer_packet_ce0 = grp_Read_r_fu_353_Queue_buffer_packet_ce0.read();
    } else {
        Queue_buffer_packet_ce0 = ap_const_logic_0;
    }
}

void switch_output_port_lookup::thread_Queue_buffer_packet_d0() {
    Queue_buffer_packet_d0 = esl_concat<161,256>(esl_concat<129,32>(esl_concat<1,128>(s_axis_tlast_V.read(), s_axis_tuser_V.read()), s_axis_tkeep_V.read()), s_axis_tdata_V.read());
}

void switch_output_port_lookup::thread_Queue_buffer_packet_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(r_V_fu_450_p2.read(), ap_const_lv1_1))) {
        Queue_buffer_packet_we0 = ap_const_logic_1;
    } else {
        Queue_buffer_packet_we0 = ap_const_logic_0;
    }
}

void switch_output_port_lookup::thread_Queue_size_assign_i_1_fu_530_p2() {
    Queue_size_assign_i_1_fu_530_p2 = (!Queue_size.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(Queue_size.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void switch_output_port_lookup::thread_Queue_size_assign_i_fu_465_p2() {
    Queue_size_assign_i_fu_465_p2 = (!Queue_ap_axis_size.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(Queue_ap_axis_size.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void switch_output_port_lookup::thread_Queue_wr_pos_V_assi_1_fu_546_p2() {
    Queue_wr_pos_V_assi_1_fu_546_p2 = (!Queue_wr_pos_V.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(Queue_wr_pos_V.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void switch_output_port_lookup::thread_Queue_wr_pos_V_assi_fu_481_p2() {
    Queue_wr_pos_V_assi_fu_481_p2 = (!Queue_wr_pos_V_1.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(Queue_wr_pos_V_1.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void switch_output_port_lookup::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void switch_output_port_lookup::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void switch_output_port_lookup::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void switch_output_port_lookup::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void switch_output_port_lookup::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void switch_output_port_lookup::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(grp_Read_r_fu_353_ap_done.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void switch_output_port_lookup::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void switch_output_port_lookup::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(grp_Read_r_fu_353_ap_done.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void switch_output_port_lookup::thread_eth_ret_i_i_eth_fu_377_ap_start() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        eth_ret_i_i_eth_fu_377_ap_start = ap_const_logic_1;
    } else {
        eth_ret_i_i_eth_fu_377_ap_start = ap_const_logic_0;
    }
}

void switch_output_port_lookup::thread_eth_ret_i_i_eth_fu_377_valid_V() {
    eth_ret_i_i_eth_fu_377_valid_V = (rhs_V_fu_444_p2.read() & s_axis_tvalid_V.read());
}

void switch_output_port_lookup::thread_grp_Read_r_fu_353_ap_start() {
    grp_Read_r_fu_353_ap_start = grp_Read_r_fu_353_ap_start_reg.read();
}

void switch_output_port_lookup::thread_lut_ret_i_i_lut_fu_278_ap_start() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        lut_ret_i_i_lut_fu_278_ap_start = ap_const_logic_1;
    } else {
        lut_ret_i_i_lut_fu_278_ap_start = ap_const_logic_0;
    }
}

void switch_output_port_lookup::thread_m_axis_tdata_V() {
    m_axis_tdata_V = grp_Read_r_fu_353_ap_return_0.read();
}

void switch_output_port_lookup::thread_m_axis_tkeep_V() {
    m_axis_tkeep_V = grp_Read_r_fu_353_ap_return_1.read();
}

void switch_output_port_lookup::thread_m_axis_tlast_V() {
    m_axis_tlast_V = grp_Read_r_fu_353_ap_return_4.read();
}

void switch_output_port_lookup::thread_m_axis_tuser_V() {
    m_axis_tuser_V = grp_Read_r_fu_353_ap_return_2.read();
}

void switch_output_port_lookup::thread_m_axis_tvalid_V() {
    m_axis_tvalid_V = grp_Read_r_fu_353_ap_return_3.read();
}

void switch_output_port_lookup::thread_r_V_fu_450_p2() {
    r_V_fu_450_p2 = (rhs_V_fu_444_p2.read() & s_axis_tvalid_V.read());
}

void switch_output_port_lookup::thread_reset_V_read_read_fu_168_p2() {
    reset_V_read_read_fu_168_p2 = reset_V.read();
}

void switch_output_port_lookup::thread_rhs_V_fu_444_p2() {
    rhs_V_fu_444_p2 = (!tmp_fu_434_p4.read().is_01() || !ap_const_lv29_1.is_01())? sc_lv<1>(): (sc_bigint<29>(tmp_fu_434_p4.read()) < sc_bigint<29>(ap_const_lv29_1));
}

void switch_output_port_lookup::thread_s_axis_tready_V() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        s_axis_tready_V = rhs_V_reg_631.read();
    } else {
        s_axis_tready_V = s_axis_tready_V_preg.read();
    }
}

void switch_output_port_lookup::thread_this_assign_2_fu_388_p2() {
    this_assign_2_fu_388_p2 = (reset_V.read() ^ ap_const_lv1_1);
}

void switch_output_port_lookup::thread_tmp_fu_434_p4() {
    tmp_fu_434_p4 = Queue_ap_axis_size.read().range(31, 3);
}

void switch_output_port_lookup::thread_tmp_i3_i_fu_558_p1() {
    tmp_i3_i_fu_558_p1 = esl_zext<64,4>(Queue_wr_pos_V.read());
}

void switch_output_port_lookup::thread_tmp_i_i_fu_493_p1() {
    tmp_i_i_fu_493_p1 = esl_zext<64,4>(Queue_wr_pos_V_1.read());
}

void switch_output_port_lookup::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(grp_Read_r_fu_353_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}

void switch_output_port_lookup::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_tdata_V\" :  \"" << s_axis_tdata_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_tkeep_V\" :  \"" << s_axis_tkeep_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_tuser_V\" :  \"" << s_axis_tuser_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_tvalid_V\" :  \"" << s_axis_tvalid_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axis_tready_V\" :  \"" << s_axis_tready_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_tlast_V\" :  \"" << s_axis_tlast_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_tdata_V\" :  \"" << m_axis_tdata_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_tkeep_V\" :  \"" << m_axis_tkeep_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_tuser_V\" :  \"" << m_axis_tuser_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_tvalid_V\" :  \"" << m_axis_tvalid_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axis_tready_V\" :  \"" << m_axis_tready_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_tlast_V\" :  \"" << m_axis_tlast_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"reset_V\" :  \"" << reset_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

