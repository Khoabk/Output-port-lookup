// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "eth.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic eth::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic eth::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> eth::ap_ST_fsm_state1 = "1";
const sc_lv<32> eth::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> eth::ap_const_lv1_0 = "0";
const sc_lv<1> eth::ap_const_lv1_1 = "1";
const sc_lv<48> eth::ap_const_lv48_0 = "000000000000000000000000000000000000000000000000";
const sc_lv<8> eth::ap_const_lv8_0 = "00000000";
const sc_lv<32> eth::ap_const_lv32_10 = "10000";
const sc_lv<32> eth::ap_const_lv32_17 = "10111";
const sc_lv<32> eth::ap_const_lv32_30 = "110000";
const sc_lv<32> eth::ap_const_lv32_5F = "1011111";
const bool eth::ap_const_boolean_1 = true;

eth::eth(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_dst_mac_V_1_phi_fu_110_p8);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( reset_V_read_read_fu_44_p2 );
    sensitive << ( state_load_load_fu_162_p1 );
    sensitive << ( valid_V_read_read_fu_56_p2 );
    sensitive << ( tmp_fu_177_p1 );

    SC_METHOD(thread_ap_phi_mux_eth_done_V_1_phi_fu_142_p8);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( reset_V_read_read_fu_44_p2 );
    sensitive << ( state_load_load_fu_162_p1 );
    sensitive << ( valid_V_read_read_fu_56_p2 );

    SC_METHOD(thread_ap_phi_mux_src_mac_V_1_phi_fu_94_p8);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tdata_V );
    sensitive << ( reset_V_read_read_fu_44_p2 );
    sensitive << ( state_load_load_fu_162_p1 );
    sensitive << ( valid_V_read_read_fu_56_p2 );

    SC_METHOD(thread_ap_phi_mux_src_port_V_1_phi_fu_126_p8);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tuser_V );
    sensitive << ( reset_V_read_read_fu_44_p2 );
    sensitive << ( state_load_load_fu_162_p1 );
    sensitive << ( valid_V_read_read_fu_56_p2 );

    SC_METHOD(thread_ap_phi_mux_write_flag3_1_phi_fu_77_p8);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( reset_V_read_read_fu_44_p2 );
    sensitive << ( state_load_load_fu_162_p1 );
    sensitive << ( valid_V_read_read_fu_56_p2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ssdm_int_V_write_ass_fu_205_p3 );
    sensitive << ( ap_return_0_preg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ssdm_int_V_write_ass_2_fu_213_p3 );
    sensitive << ( ap_return_1_preg );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ssdm_int_V_write_ass_3_fu_221_p3 );
    sensitive << ( ap_return_2_preg );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ssdm_int_V_write_ass_4_fu_229_p2 );
    sensitive << ( ap_return_3_preg );

    SC_METHOD(thread_brmerge_demorgan_fu_199_p2);
    sensitive << ( valid_V );
    sensitive << ( tlast_V );

    SC_METHOD(thread_reset_V_read_read_fu_44_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( reset_V );

    SC_METHOD(thread_ssdm_int_V_write_ass_2_fu_213_p3);
    sensitive << ( ap_phi_mux_write_flag3_1_phi_fu_77_p8 );
    sensitive << ( ap_phi_mux_src_mac_V_1_phi_fu_94_p8 );

    SC_METHOD(thread_ssdm_int_V_write_ass_3_fu_221_p3);
    sensitive << ( ap_phi_mux_write_flag3_1_phi_fu_77_p8 );
    sensitive << ( ap_phi_mux_src_port_V_1_phi_fu_126_p8 );

    SC_METHOD(thread_ssdm_int_V_write_ass_4_fu_229_p2);
    sensitive << ( ap_phi_mux_write_flag3_1_phi_fu_77_p8 );
    sensitive << ( ap_phi_mux_eth_done_V_1_phi_fu_142_p8 );

    SC_METHOD(thread_ssdm_int_V_write_ass_fu_205_p3);
    sensitive << ( ap_phi_mux_write_flag3_1_phi_fu_77_p8 );
    sensitive << ( ap_phi_mux_dst_mac_V_1_phi_fu_110_p8 );

    SC_METHOD(thread_state_load_load_fu_162_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state );
    sensitive << ( reset_V_read_read_fu_44_p2 );

    SC_METHOD(thread_tmp_fu_177_p1);
    sensitive << ( tdata_V );

    SC_METHOD(thread_valid_V_read_read_fu_56_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( valid_V );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "1";
    state = "0";
    ap_return_0_preg = "000000000000000000000000000000000000000000000000";
    ap_return_1_preg = "000000000000000000000000000000000000000000000000";
    ap_return_2_preg = "00000000";
    ap_return_3_preg = "0";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "eth_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, tdata_V, "(port)tdata_V");
    sc_trace(mVcdFile, tuser_V, "(port)tuser_V");
    sc_trace(mVcdFile, valid_V, "(port)valid_V");
    sc_trace(mVcdFile, tlast_V, "(port)tlast_V");
    sc_trace(mVcdFile, reset_V, "(port)reset_V");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, state, "state");
    sc_trace(mVcdFile, ap_phi_mux_write_flag3_1_phi_fu_77_p8, "ap_phi_mux_write_flag3_1_phi_fu_77_p8");
    sc_trace(mVcdFile, reset_V_read_read_fu_44_p2, "reset_V_read_read_fu_44_p2");
    sc_trace(mVcdFile, state_load_load_fu_162_p1, "state_load_load_fu_162_p1");
    sc_trace(mVcdFile, valid_V_read_read_fu_56_p2, "valid_V_read_read_fu_56_p2");
    sc_trace(mVcdFile, ap_phi_mux_src_mac_V_1_phi_fu_94_p8, "ap_phi_mux_src_mac_V_1_phi_fu_94_p8");
    sc_trace(mVcdFile, ap_phi_mux_dst_mac_V_1_phi_fu_110_p8, "ap_phi_mux_dst_mac_V_1_phi_fu_110_p8");
    sc_trace(mVcdFile, tmp_fu_177_p1, "tmp_fu_177_p1");
    sc_trace(mVcdFile, ap_phi_mux_src_port_V_1_phi_fu_126_p8, "ap_phi_mux_src_port_V_1_phi_fu_126_p8");
    sc_trace(mVcdFile, ap_phi_mux_eth_done_V_1_phi_fu_142_p8, "ap_phi_mux_eth_done_V_1_phi_fu_142_p8");
    sc_trace(mVcdFile, brmerge_demorgan_fu_199_p2, "brmerge_demorgan_fu_199_p2");
    sc_trace(mVcdFile, ssdm_int_V_write_ass_fu_205_p3, "ssdm_int_V_write_ass_fu_205_p3");
    sc_trace(mVcdFile, ssdm_int_V_write_ass_2_fu_213_p3, "ssdm_int_V_write_ass_2_fu_213_p3");
    sc_trace(mVcdFile, ssdm_int_V_write_ass_3_fu_221_p3, "ssdm_int_V_write_ass_3_fu_221_p3");
    sc_trace(mVcdFile, ssdm_int_V_write_ass_4_fu_229_p2, "ssdm_int_V_write_ass_4_fu_229_p2");
    sc_trace(mVcdFile, ap_return_0_preg, "ap_return_0_preg");
    sc_trace(mVcdFile, ap_return_1_preg, "ap_return_1_preg");
    sc_trace(mVcdFile, ap_return_2_preg, "ap_return_2_preg");
    sc_trace(mVcdFile, ap_return_3_preg, "ap_return_3_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

eth::~eth() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void eth::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_0_preg = ap_const_lv48_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_return_0_preg = ssdm_int_V_write_ass_fu_205_p3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_1_preg = ap_const_lv48_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_return_1_preg = ssdm_int_V_write_ass_2_fu_213_p3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_2_preg = ap_const_lv8_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_return_2_preg = ssdm_int_V_write_ass_3_fu_221_p3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_3_preg = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_return_3_preg = ssdm_int_V_write_ass_4_fu_229_p2.read();
        }
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, reset_V_read_read_fu_44_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, reset_V_read_read_fu_44_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, state_load_load_fu_162_p1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, brmerge_demorgan_fu_199_p2.read())))) {
        state = ap_const_lv1_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, reset_V_read_read_fu_44_p2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, state_load_load_fu_162_p1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, valid_V_read_read_fu_56_p2.read()))) {
        state = ap_const_lv1_1;
    }
}

void eth::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void eth::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void eth::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void eth::thread_ap_phi_mux_dst_mac_V_1_phi_fu_110_p8() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, reset_V_read_read_fu_44_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, state_load_load_fu_162_p1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, valid_V_read_read_fu_56_p2.read()))) {
        ap_phi_mux_dst_mac_V_1_phi_fu_110_p8 = tmp_fu_177_p1.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, reset_V_read_read_fu_44_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, reset_V_read_read_fu_44_p2.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, state_load_load_fu_162_p1.read())))) {
        ap_phi_mux_dst_mac_V_1_phi_fu_110_p8 = ap_const_lv48_0;
    } else {
        ap_phi_mux_dst_mac_V_1_phi_fu_110_p8 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void eth::thread_ap_phi_mux_eth_done_V_1_phi_fu_142_p8() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, reset_V_read_read_fu_44_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, state_load_load_fu_162_p1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, valid_V_read_read_fu_56_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, reset_V_read_read_fu_44_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, state_load_load_fu_162_p1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, valid_V_read_read_fu_56_p2.read())))) {
        ap_phi_mux_eth_done_V_1_phi_fu_142_p8 = ap_const_lv1_1;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, reset_V_read_read_fu_44_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, reset_V_read_read_fu_44_p2.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, state_load_load_fu_162_p1.read())))) {
        ap_phi_mux_eth_done_V_1_phi_fu_142_p8 = ap_const_lv1_0;
    } else {
        ap_phi_mux_eth_done_V_1_phi_fu_142_p8 =  (sc_lv<1>) ("X");
    }
}

void eth::thread_ap_phi_mux_src_mac_V_1_phi_fu_94_p8() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, reset_V_read_read_fu_44_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, state_load_load_fu_162_p1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, valid_V_read_read_fu_56_p2.read()))) {
        ap_phi_mux_src_mac_V_1_phi_fu_94_p8 = tdata_V.read().range(95, 48);
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, reset_V_read_read_fu_44_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, reset_V_read_read_fu_44_p2.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, state_load_load_fu_162_p1.read())))) {
        ap_phi_mux_src_mac_V_1_phi_fu_94_p8 = ap_const_lv48_0;
    } else {
        ap_phi_mux_src_mac_V_1_phi_fu_94_p8 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void eth::thread_ap_phi_mux_src_port_V_1_phi_fu_126_p8() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, reset_V_read_read_fu_44_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, state_load_load_fu_162_p1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, valid_V_read_read_fu_56_p2.read()))) {
        ap_phi_mux_src_port_V_1_phi_fu_126_p8 = tuser_V.read().range(23, 16);
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, reset_V_read_read_fu_44_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, reset_V_read_read_fu_44_p2.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, state_load_load_fu_162_p1.read())))) {
        ap_phi_mux_src_port_V_1_phi_fu_126_p8 = ap_const_lv8_0;
    } else {
        ap_phi_mux_src_port_V_1_phi_fu_126_p8 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void eth::thread_ap_phi_mux_write_flag3_1_phi_fu_77_p8() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, reset_V_read_read_fu_44_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, state_load_load_fu_162_p1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, valid_V_read_read_fu_56_p2.read()))) {
        ap_phi_mux_write_flag3_1_phi_fu_77_p8 = ap_const_lv1_0;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, reset_V_read_read_fu_44_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, reset_V_read_read_fu_44_p2.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, state_load_load_fu_162_p1.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, reset_V_read_read_fu_44_p2.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, state_load_load_fu_162_p1.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, valid_V_read_read_fu_56_p2.read())))) {
        ap_phi_mux_write_flag3_1_phi_fu_77_p8 = ap_const_lv1_1;
    } else {
        ap_phi_mux_write_flag3_1_phi_fu_77_p8 =  (sc_lv<1>) ("X");
    }
}

void eth::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void eth::thread_ap_return_0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_return_0 = ssdm_int_V_write_ass_fu_205_p3.read();
    } else {
        ap_return_0 = ap_return_0_preg.read();
    }
}

void eth::thread_ap_return_1() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_return_1 = ssdm_int_V_write_ass_2_fu_213_p3.read();
    } else {
        ap_return_1 = ap_return_1_preg.read();
    }
}

void eth::thread_ap_return_2() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_return_2 = ssdm_int_V_write_ass_3_fu_221_p3.read();
    } else {
        ap_return_2 = ap_return_2_preg.read();
    }
}

void eth::thread_ap_return_3() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_return_3 = ssdm_int_V_write_ass_4_fu_229_p2.read();
    } else {
        ap_return_3 = ap_return_3_preg.read();
    }
}

void eth::thread_brmerge_demorgan_fu_199_p2() {
    brmerge_demorgan_fu_199_p2 = (valid_V.read() & tlast_V.read());
}

void eth::thread_reset_V_read_read_fu_44_p2() {
    reset_V_read_read_fu_44_p2 = reset_V.read();
}

void eth::thread_ssdm_int_V_write_ass_2_fu_213_p3() {
    ssdm_int_V_write_ass_2_fu_213_p3 = (!ap_phi_mux_write_flag3_1_phi_fu_77_p8.read()[0].is_01())? sc_lv<48>(): ((ap_phi_mux_write_flag3_1_phi_fu_77_p8.read()[0].to_bool())? ap_phi_mux_src_mac_V_1_phi_fu_94_p8.read(): ap_const_lv48_0);
}

void eth::thread_ssdm_int_V_write_ass_3_fu_221_p3() {
    ssdm_int_V_write_ass_3_fu_221_p3 = (!ap_phi_mux_write_flag3_1_phi_fu_77_p8.read()[0].is_01())? sc_lv<8>(): ((ap_phi_mux_write_flag3_1_phi_fu_77_p8.read()[0].to_bool())? ap_phi_mux_src_port_V_1_phi_fu_126_p8.read(): ap_const_lv8_0);
}

void eth::thread_ssdm_int_V_write_ass_4_fu_229_p2() {
    ssdm_int_V_write_ass_4_fu_229_p2 = (ap_phi_mux_write_flag3_1_phi_fu_77_p8.read() & ap_phi_mux_eth_done_V_1_phi_fu_142_p8.read());
}

void eth::thread_ssdm_int_V_write_ass_fu_205_p3() {
    ssdm_int_V_write_ass_fu_205_p3 = (!ap_phi_mux_write_flag3_1_phi_fu_77_p8.read()[0].is_01())? sc_lv<48>(): ((ap_phi_mux_write_flag3_1_phi_fu_77_p8.read()[0].to_bool())? ap_phi_mux_dst_mac_V_1_phi_fu_110_p8.read(): ap_const_lv48_0);
}

void eth::thread_state_load_load_fu_162_p1() {
    state_load_load_fu_162_p1 = state.read();
}

void eth::thread_tmp_fu_177_p1() {
    tmp_fu_177_p1 = tdata_V.read().range(48-1, 0);
}

void eth::thread_valid_V_read_read_fu_56_p2() {
    valid_V_read_read_fu_56_p2 = valid_V.read();
}

void eth::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

}

